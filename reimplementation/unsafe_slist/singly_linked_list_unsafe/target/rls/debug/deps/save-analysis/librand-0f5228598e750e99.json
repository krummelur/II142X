{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3","program":"/home/fredrik/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rand","--edition=2018","/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"getrandom\"","--cfg","feature=\"small_rng\"","-C","metadata=0f5228598e750e99","-C","extra-filename=-0f5228598e750e99","--out-dir","/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps","-L","dependency=/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps","--extern","rand_core=/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps/librand_core-6d93816712191e61.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/fredrik/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps/librand-0f5228598e750e99.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[8121768166687423707,4521472353115800080]},"crate_root":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src","external_crates":[{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5755871685339259462,14524450630327408145]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6095990061662150844,17257511342173735843]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13534664360101634333,15955848543282431589]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":4,"id":{"name":"rand_core","disambiguator":[5058064500787580988,17223958804819295434]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":5,"id":{"name":"getrandom","disambiguator":[10629857054396772369,10365506566331352989]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":6,"id":{"name":"cfg_if","disambiguator":[1155024563974712189,5296233732488635092]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","num":7,"id":{"name":"libc","disambiguator":[7163127628430238526,6542326921292212871]}}],"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":408,"byte_end":6743,"line_start":10,"line_end":215,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":4,"index":129},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2860,"byte_end":2869,"line_start":95,"line_end":95,"column_start":21,"column_end":30},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":73},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2871,"byte_end":2876,"line_start":95,"line_end":95,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":124},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2878,"byte_end":2885,"line_start":95,"line_end":95,"column_start":39,"column_end":46},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":130},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2887,"byte_end":2898,"line_start":95,"line_end":95,"column_start":48,"column_end":59},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11194,"byte_end":11203,"line_start":99,"line_end":99,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":441},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11205,"byte_end":11219,"line_start":99,"line_end":99,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":801},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11244,"byte_end":11250,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":802},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11244,"byte_end":11250,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":21}},{"kind":"Use","ref_id":{"krate":0,"index":794},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11252,"byte_end":11264,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":795},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11252,"byte_end":11264,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":22}},{"kind":"Use","ref_id":{"krate":0,"index":870},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11288,"byte_end":11300,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":871},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11288,"byte_end":11300,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":455},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11340,"byte_end":11347,"line_start":102,"line_end":102,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":157},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11859,"byte_end":11868,"line_start":122,"line_end":122,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":161}},{"kind":"Use","ref_id":{"krate":0,"index":265},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135414,"byte_end":135426,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":1563},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135497,"byte_end":135505,"line_start":24,"line_end":24,"column_start":22,"column_end":30},"alias_span":null,"name":"SmallRng","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":408},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135721,"byte_end":135735,"line_start":30,"line_end":30,"column_start":40,"column_end":54},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135737,"byte_end":135748,"line_start":30,"line_end":30,"column_start":56,"column_end":67},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":4,"index":129},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135890,"byte_end":135899,"line_start":34,"line_end":34,"column_start":35,"column_end":44},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":314},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135901,"byte_end":135904,"line_start":34,"line_end":34,"column_start":46,"column_end":49},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":4,"index":124},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135906,"byte_end":135913,"line_start":34,"line_end":34,"column_start":51,"column_end":58},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":4,"index":130},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135915,"byte_end":135926,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":288}},{"kind":"Use","ref_id":{"krate":0,"index":1563},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":160014,"byte_end":160022,"line_start":114,"line_end":114,"column_start":52,"column_end":60},"alias_span":null,"name":"SmallRng","value":"","parent":{"krate":0,"index":344}},{"kind":"Use","ref_id":{"krate":4,"index":170},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":160266,"byte_end":160271,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":344}},{"kind":"Use","ref_id":{"krate":4,"index":171},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":160266,"byte_end":160271,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":395}},{"kind":"Use","ref_id":{"krate":0,"index":335},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3120,"byte_end":3124,"line_start":107,"line_end":107,"column_start":15,"column_end":19},"alias_span":null,"name":"Fill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":314},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":3126,"byte_end":3129,"line_start":107,"line_end":107,"column_start":21,"column_end":24},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":408,"byte_end":6743,"line_start":10,"line_end":215,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":288},{"krate":0,"index":299},{"krate":0,"index":344},{"krate":0,"index":396},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"/ Utilities for random number generation","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Quick Start","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ functionality on top of RNGs.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/ let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ nums.shuffle(&mut rng);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # The Book","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ For the user guide and further documentation, please read","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1394,"byte_end":1455,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"/ [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1456,"byte_end":1517,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1733,"byte_end":1755,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1756,"byte_end":1795,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"no_std","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":1857,"byte_end":1867,"line_start":51,"line_end":51,"column_start":1,"column_end":11}},{"value":"allow(clippy :: float_cmp, clippy :: neg_cmp_op_on_partial_ord,)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2034,"byte_end":2108,"line_start":55,"line_end":58,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":1593},{"krate":0,"index":22},{"krate":0,"index":1595},{"krate":0,"index":23},{"krate":0,"index":1597},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":41},{"krate":0,"index":150},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":195},{"krate":0,"index":228},{"krate":0,"index":265},{"krate":0,"index":271},{"krate":0,"index":1237},{"krate":0,"index":1244},{"krate":0,"index":277},{"krate":0,"index":284},{"krate":0,"index":1249},{"krate":0,"index":1254},{"krate":0,"index":1253},{"krate":0,"index":1251}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"/ Generating random samples from probability distributions","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7153,"byte_end":7213,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7214,"byte_end":7217,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7218,"byte_end":7294,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ implementations. It is the workhorse behind some of the convenient","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7295,"byte_end":7365,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ functionality of the [`Rng`] trait, e.g. [`Rng::gen`] and of course","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7366,"byte_end":7437,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ [`Rng::sample`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7438,"byte_end":7458,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7459,"byte_end":7462,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7463,"byte_end":7536,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ occurrence of each value in its sample space.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7537,"byte_end":7586,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7587,"byte_end":7590,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7591,"byte_end":7669,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7670,"byte_end":7743,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ according to the distribution `X` represents, using an external source of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7744,"byte_end":7821,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ randomness (an RNG supplied to the `sample` function).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7822,"byte_end":7880,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7881,"byte_end":7884,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7885,"byte_end":7955,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":7956,"byte_end":8029,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ but it may have internal parameters set at construction time (for example,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8030,"byte_end":8108,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8109,"byte_end":8189,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8190,"byte_end":8193,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8194,"byte_end":8197,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # The `Standard` distribution","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8198,"byte_end":8231,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8232,"byte_end":8235,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8236,"byte_end":8306,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ distribution used by [`Rng::gen`] and represents the \"default\" way to","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8307,"byte_end":8380,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ produce a random value for many different types, including most primitive","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8381,"byte_end":8458,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8459,"byte_end":8535,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ [`Standard`] for more details.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8536,"byte_end":8570,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8571,"byte_end":8574,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8575,"byte_end":8654,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ possible to generate type `T` with [`Rng::gen`], and by extension also","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8655,"byte_end":8729,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ with the [`random`] function.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8730,"byte_end":8763,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8764,"byte_end":8767,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Random characters","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8768,"byte_end":8792,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8793,"byte_end":8796,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8797,"byte_end":8871,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8872,"byte_end":8949,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ `char`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8950,"byte_end":8961,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8962,"byte_end":8965,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8966,"byte_end":8969,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Uniform numeric ranges","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8970,"byte_end":8998,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":8999,"byte_end":9002,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9003,"byte_end":9080,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9081,"byte_end":9156,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9157,"byte_end":9232,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9233,"byte_end":9311,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9312,"byte_end":9315,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Values may be sampled from this distribution using [`Rng::sample(Range)`] or","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9316,"byte_end":9396,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ by creating a distribution object with [`Uniform::new`],","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9397,"byte_end":9457,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/ [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9458,"byte_end":9536,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ known at compile time it is typically faster to reuse an existing","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9537,"byte_end":9606,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ `Uniform` object than to call [`Rng::sample(Range)`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9607,"byte_end":9664,"line_start":61,"line_end":61,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9665,"byte_end":9668,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9669,"byte_end":9741,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9742,"byte_end":9814,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/ documentation in the [`uniform`] module). Doing so enables generation of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9815,"byte_end":9891,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ values of type `T` with  [`Rng::sample(Range)`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9892,"byte_end":9944,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9945,"byte_end":9948,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Open and half-open ranges","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9949,"byte_end":9981,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9982,"byte_end":9985,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":9986,"byte_end":10061,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10062,"byte_end":10138,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"/ and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10139,"byte_end":10220,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"/ [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10221,"byte_end":10304,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"/ [`Standard`] documentation for more details.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10305,"byte_end":10353,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10354,"byte_end":10357,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Non-uniform sampling","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10358,"byte_end":10384,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10385,"byte_end":10388,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10389,"byte_end":10466,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10467,"byte_end":10538,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10539,"byte_end":10542,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10543,"byte_end":10612,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"/ [`WeightedIndex`] distribution.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10613,"byte_end":10648,"line_start":82,"line_end":82,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10649,"byte_end":10652,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10653,"byte_end":10727,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10728,"byte_end":10799,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10800,"byte_end":10803,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10804,"byte_end":10807,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10808,"byte_end":10894,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10895,"byte_end":10950,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":10951,"byte_end":10998,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ [`random`]: crate::random","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11000,"byte_end":11029,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11030,"byte_end":11085,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11086,"byte_end":11133,"line_start":94,"line_end":94,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":434},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21505,"byte_end":21514,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":435}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20863,"byte_end":20894,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20895,"byte_end":20898,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20899,"byte_end":20969,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20970,"byte_end":20973,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20974,"byte_end":20987,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20988,"byte_end":20991,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":20992,"byte_end":21003,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21004,"byte_end":21059,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21060,"byte_end":21063,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21064,"byte_end":21105,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21106,"byte_end":21152,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21153,"byte_end":21208,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21209,"byte_end":21216,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21217,"byte_end":21220,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21221,"byte_end":21236,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21237,"byte_end":21240,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21241,"byte_end":21311,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21312,"byte_end":21382,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":21383,"byte_end":21399,"line_start":35,"line_end":35,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":442},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":22979,"byte_end":22997,"line_start":72,"line_end":72,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":441},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":22951,"byte_end":22974,"line_start":71,"line_end":71,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":441},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":22930,"byte_end":22944,"line_start":70,"line_end":70,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"pub enum BernoulliError {\n\n    /// `p < 0` or `p > 1`.\n    InvalidProbability,\n}","parent":null,"children":[{"krate":0,"index":442}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":22829,"byte_end":22875,"line_start":68,"line_end":68,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23868,"byte_end":23871,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"pub fn new(f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23349,"byte_end":23423,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23428,"byte_end":23431,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23436,"byte_end":23451,"line_start":89,"line_end":89,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23456,"byte_end":23459,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23464,"byte_end":23536,"line_start":91,"line_end":91,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23541,"byte_end":23614,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23619,"byte_end":23622,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23627,"byte_end":23703,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23708,"byte_end":23774,"line_start":95,"line_end":95,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23779,"byte_end":23842,"line_start":96,"line_end":96,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23847,"byte_end":23856,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24752,"byte_end":24762,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"pub fn from_ratio(u32, u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24210,"byte_end":24276,"line_start":110,"line_end":110,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24281,"byte_end":24349,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24354,"byte_end":24428,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24433,"byte_end":24436,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24441,"byte_end":24510,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ For `numerator > denominator` and `denominator == 0`, this returns an","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24515,"byte_end":24588,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ error. Otherwise, for `numerator == denominator`, samples are always","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24593,"byte_end":24665,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ true; for `numerator == 0` samples are always false.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24670,"byte_end":24726,"line_start":117,"line_end":117,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":24731,"byte_end":24740,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":41},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":455},{"krate":0,"index":464},{"krate":0,"index":462},{"krate":0,"index":459},{"krate":0,"index":57},{"krate":0,"index":65},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":105},{"krate":0,"index":110},{"krate":0,"index":115},{"krate":0,"index":467},{"krate":0,"index":477},{"krate":0,"index":475},{"krate":0,"index":472},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":121},{"krate":0,"index":720},{"krate":0,"index":725},{"krate":0,"index":724},{"krate":0,"index":722},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":727},{"krate":0,"index":736},{"krate":0,"index":734},{"krate":0,"index":731},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":771},{"krate":0,"index":777},{"krate":0,"index":776},{"krate":0,"index":774},{"krate":0,"index":779},{"krate":0,"index":792},{"krate":0,"index":791},{"krate":0,"index":789},{"krate":0,"index":137},{"krate":0,"index":139}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"/ A distribution uniformly sampling numbers within a given range.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28068,"byte_end":28135,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28136,"byte_end":28139,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28140,"byte_end":28218,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28219,"byte_end":28298,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28299,"byte_end":28366,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ [`Uniform`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28367,"byte_end":28383,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28384,"byte_end":28387,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This distribution is provided with support for several primitive types","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28388,"byte_end":28462,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28463,"byte_end":28541,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28542,"byte_end":28621,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ implementation.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28622,"byte_end":28641,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28642,"byte_end":28645,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28646,"byte_end":28724,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28725,"byte_end":28800,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28801,"byte_end":28880,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ need to be used directly (unless implementing a derived back-end).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28881,"byte_end":28951,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28952,"byte_end":28955,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example usage","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28956,"byte_end":28975,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28976,"byte_end":28979,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28980,"byte_end":28987,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":28988,"byte_end":29020,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29021,"byte_end":29058,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29059,"byte_end":29062,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29063,"byte_end":29094,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29095,"byte_end":29136,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29137,"byte_end":29140,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // sample between 1 and 10 points","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29141,"byte_end":29178,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ for _ in 0..rng.gen_range(1..=10) {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29179,"byte_end":29218,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29219,"byte_end":29298,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29299,"byte_end":29357,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"/     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29358,"byte_end":29398,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29399,"byte_end":29404,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29405,"byte_end":29412,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29413,"byte_end":29416,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Extending `Uniform` to support a custom type","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29417,"byte_end":29467,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29468,"byte_end":29471,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29472,"byte_end":29547,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29548,"byte_end":29629,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"/ helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29630,"byte_end":29706,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29707,"byte_end":29710,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29711,"byte_end":29791,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29792,"byte_end":29870,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29871,"byte_end":29947,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ `low < high`). The example below merely wraps another back-end.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":29948,"byte_end":30015,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30016,"byte_end":30019,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30020,"byte_end":30097,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30098,"byte_end":30176,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ by value. In the implementation of these functions, you can choose to","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30177,"byte_end":30250,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30251,"byte_end":30335,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30336,"byte_end":30406,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30407,"byte_end":30410,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30411,"byte_end":30418,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30419,"byte_end":30444,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30445,"byte_end":30507,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30508,"byte_end":30564,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30565,"byte_end":30568,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ struct MyF32(f32);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30569,"byte_end":30591,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30592,"byte_end":30595,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone, Copy, Debug)]","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30596,"byte_end":30629,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30630,"byte_end":30673,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30674,"byte_end":30677,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ impl UniformSampler for UniformMyF32 {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30678,"byte_end":30720,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"/     type X = MyF32;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30721,"byte_end":30744,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30745,"byte_end":30794,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30795,"byte_end":30847,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30848,"byte_end":30899,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30900,"byte_end":30909,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30910,"byte_end":30993,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/     }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":30994,"byte_end":31003,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"/     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31004,"byte_end":31063,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31064,"byte_end":31116,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31117,"byte_end":31168,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31169,"byte_end":31178,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"/         UniformSampler::new(low, high)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31179,"byte_end":31221,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/     }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31222,"byte_end":31231,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31232,"byte_end":31299,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/         MyF32(self.0.sample(rng))","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31300,"byte_end":31337,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31338,"byte_end":31347,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31348,"byte_end":31353,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31354,"byte_end":31357,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ impl SampleUniform for MyF32 {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31358,"byte_end":31392,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/     type Sampler = UniformMyF32;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31393,"byte_end":31429,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31430,"byte_end":31435,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31436,"byte_end":31439,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31440,"byte_end":31495,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/ let uniform = Uniform::new(low, high);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31496,"byte_end":31538,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"/ let x = uniform.sample(&mut thread_rng());","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31539,"byte_end":31585,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31586,"byte_end":31593,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31594,"byte_end":31597,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31598,"byte_end":31665,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"/ [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31666,"byte_end":31735,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/ [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31736,"byte_end":31797,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"/ [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31798,"byte_end":31863,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31864,"byte_end":31935,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/ [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":31936,"byte_end":32017,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":455},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34617,"byte_end":34624,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32635,"byte_end":32682,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32683,"byte_end":32686,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32687,"byte_end":32758,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32759,"byte_end":32835,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster. If only one sample","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32836,"byte_end":32916,"line_start":128,"line_end":128,"column_start":1,"column_end":81}},{"value":"/ from the range is required, [`Rng::gen_range`] can be more efficient.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32917,"byte_end":32990,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32991,"byte_end":32994,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":32995,"byte_end":33067,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33068,"byte_end":33146,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33147,"byte_end":33225,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33226,"byte_end":33258,"line_start":134,"line_end":134,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33259,"byte_end":33262,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33263,"byte_end":33328,"line_start":136,"line_end":136,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33329,"byte_end":33408,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33409,"byte_end":33488,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33489,"byte_end":33568,"line_start":139,"line_end":139,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33569,"byte_end":33646,"line_start":140,"line_end":140,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33647,"byte_end":33691,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33692,"byte_end":33695,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33696,"byte_end":33754,"line_start":143,"line_end":143,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular, care must","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33755,"byte_end":33834,"line_start":144,"line_end":144,"column_start":1,"column_end":80}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33835,"byte_end":33914,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33915,"byte_end":33918,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33919,"byte_end":33932,"line_start":147,"line_end":147,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33933,"byte_end":33936,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33937,"byte_end":33944,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33945,"byte_end":33998,"line_start":150,"line_end":150,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":33999,"byte_end":34002,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ let between = Uniform::from(10..10000);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34003,"byte_end":34046,"line_start":152,"line_end":152,"column_start":1,"column_end":44}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34047,"byte_end":34084,"line_start":153,"line_end":153,"column_start":1,"column_end":38}},{"value":"/ let mut sum = 0;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34085,"byte_end":34105,"line_start":154,"line_end":154,"column_start":1,"column_end":21}},{"value":"/ for _ in 0..1000 {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34106,"byte_end":34128,"line_start":155,"line_end":155,"column_start":1,"column_end":23}},{"value":"/     sum += between.sample(&mut rng);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34129,"byte_end":34169,"line_start":156,"line_end":156,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34170,"byte_end":34175,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34176,"byte_end":34200,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34201,"byte_end":34208,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34209,"byte_end":34212,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For a single sample, [`Rng::gen_range`] may be prefered:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34213,"byte_end":34273,"line_start":161,"line_end":161,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34274,"byte_end":34277,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34278,"byte_end":34285,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34286,"byte_end":34304,"line_start":164,"line_end":164,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34305,"byte_end":34308,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34309,"byte_end":34346,"line_start":166,"line_end":166,"column_start":1,"column_end":38}},{"value":"/ println!(\"{}\", rng.gen_range(0..10));","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34347,"byte_end":34388,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34389,"byte_end":34396,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34397,"byte_end":34400,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34401,"byte_end":34426,"line_start":170,"line_end":170,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34427,"byte_end":34472,"line_start":171,"line_end":171,"column_start":1,"column_end":46}},{"value":"/ [`Rng::gen_range`]: Rng::gen_range","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34473,"byte_end":34511,"line_start":172,"line_end":172,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34860,"byte_end":34863,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"pub fn new<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> + Sized,\nB2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34697,"byte_end":34770,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34775,"byte_end":34848,"line_start":179,"line_end":179,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35202,"byte_end":35215,"line_start":190,"line_end":190,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> +\nSized, B2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35050,"byte_end":35125,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35130,"byte_end":35190,"line_start":189,"line_end":189,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":69},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35861,"byte_end":35874,"line_start":212,"line_end":212,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":70}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35560,"byte_end":35633,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35634,"byte_end":35679,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35680,"byte_end":35683,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35684,"byte_end":35756,"line_start":208,"line_end":208,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35757,"byte_end":35788,"line_start":209,"line_end":209,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35789,"byte_end":35792,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35793,"byte_end":35850,"line_start":211,"line_end":211,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":70},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35958,"byte_end":35965,"line_start":214,"line_end":214,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35888,"byte_end":35948,"line_start":213,"line_end":213,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":71},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36440,"byte_end":36454,"line_start":227,"line_end":227,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":85}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35996,"byte_end":36046,"line_start":217,"line_end":217,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36047,"byte_end":36050,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36051,"byte_end":36123,"line_start":219,"line_end":219,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36124,"byte_end":36155,"line_start":220,"line_end":220,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36156,"byte_end":36159,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36160,"byte_end":36236,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36237,"byte_end":36314,"line_start":223,"line_end":223,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36315,"byte_end":36318,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36319,"byte_end":36376,"line_start":225,"line_end":225,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36377,"byte_end":36429,"line_start":226,"line_end":226,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":72},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36522,"byte_end":36523,"line_start":229,"line_end":229,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36468,"byte_end":36512,"line_start":228,"line_end":228,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36786,"byte_end":36789,"line_start":236,"line_end":236,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"pub fn new<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36530,"byte_end":36602,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36607,"byte_end":36625,"line_start":232,"line_end":232,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36630,"byte_end":36633,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36638,"byte_end":36701,"line_start":234,"line_end":234,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36706,"byte_end":36778,"line_start":235,"line_end":235,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37162,"byte_end":37175,"line_start":246,"line_end":246,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> +\nSized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36926,"byte_end":36982,"line_start":241,"line_end":241,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36987,"byte_end":36990,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36995,"byte_end":37058,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37063,"byte_end":37132,"line_start":244,"line_end":244,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37137,"byte_end":37154,"line_start":245,"line_end":245,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37339,"byte_end":37345,"line_start":252,"line_end":252,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> Self::X","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37312,"byte_end":37331,"line_start":251,"line_end":251,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38320,"byte_end":38333,"line_start":273,"line_end":273,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"pub fn sample_single<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R) -> Self::X where\nB1: SampleBorrow<Self::X> + Sized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37400,"byte_end":37475,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37480,"byte_end":37524,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37529,"byte_end":37532,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37537,"byte_end":37577,"line_start":257,"line_end":257,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37582,"byte_end":37655,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37660,"byte_end":37734,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37739,"byte_end":37794,"line_start":260,"line_end":260,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37799,"byte_end":37832,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37837,"byte_end":37840,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37845,"byte_end":37920,"line_start":263,"line_end":263,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37925,"byte_end":37979,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37984,"byte_end":37991,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":37996,"byte_end":38080,"line_start":266,"line_end":266,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38085,"byte_end":38107,"line_start":267,"line_end":267,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38112,"byte_end":38175,"line_start":268,"line_end":268,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38180,"byte_end":38215,"line_start":269,"line_end":269,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38220,"byte_end":38290,"line_start":270,"line_end":270,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38295,"byte_end":38300,"line_start":271,"line_end":271,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38305,"byte_end":38312,"line_start":272,"line_end":272,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39009,"byte_end":39032,"line_start":290,"line_end":290,"column_start":8,"column_end":31},"name":"sample_single_inclusive","qualname":"::distributions::uniform::UniformSampler::sample_single_inclusive","value":"pub fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R)\n-> Self::X where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":71},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and inclusive upper bound `[low, high]`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38603,"byte_end":38678,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/ and inclusive upper bound `[low, high]`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38683,"byte_end":38727,"line_start":283,"line_end":283,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38732,"byte_end":38735,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38740,"byte_end":38780,"line_start":285,"line_end":285,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new_inclusive(low, high).sample(rng)`. However, for","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38785,"byte_end":38857,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ some types more optimal implementations for single usage may be provided","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38862,"byte_end":38938,"line_start":287,"line_end":287,"column_start":5,"column_end":81}},{"value":"/ via this method.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38943,"byte_end":38963,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/ Results may not be identical.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":38968,"byte_end":39001,"line_start":289,"line_end":289,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":95},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39868,"byte_end":39880,"line_start":318,"line_end":318,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":97}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39662,"byte_end":39716,"line_start":313,"line_end":313,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39717,"byte_end":39778,"line_start":314,"line_end":314,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39779,"byte_end":39817,"line_start":315,"line_end":315,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39818,"byte_end":39821,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39822,"byte_end":39857,"line_start":317,"line_end":317,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40034,"byte_end":40040,"line_start":322,"line_end":322,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"pub fn borrow(&Self) -> &Borrowed","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39897,"byte_end":39962,"line_start":319,"line_end":319,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39967,"byte_end":39970,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39975,"byte_end":40026,"line_start":321,"line_end":321,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":105},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40580,"byte_end":40591,"line_start":345,"line_end":345,"column_start":11,"column_end":22},"name":"SampleRange","qualname":"::distributions::uniform::SampleRange","value":"SampleRange<T>","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":109}],"decl_id":null,"docs":" Range that supports generating a single sample efficiently.","sig":null,"attributes":[{"value":"/ Range that supports generating a single sample efficiently.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40398,"byte_end":40461,"line_start":341,"line_end":341,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40462,"byte_end":40465,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ Any type implementing this trait can be used to specify the sampled range","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40466,"byte_end":40543,"line_start":343,"line_end":343,"column_start":1,"column_end":78}},{"value":"/ for `Rng::gen_range`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40544,"byte_end":40569,"line_start":344,"line_end":344,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40652,"byte_end":40665,"line_start":347,"line_end":347,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::SampleRange::sample_single","value":"pub fn sample_single<R: RngCore + ?Sized>(Self, &mut R) -> T","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":" Generate a sample from the given range.\n","sig":null,"attributes":[{"value":"/ Generate a sample from the given range.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40601,"byte_end":40644,"line_start":346,"line_end":346,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40762,"byte_end":40770,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::distributions::uniform::SampleRange::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":105},"children":[],"decl_id":null,"docs":" Check whether the range is empty.\n","sig":null,"attributes":[{"value":"/ Check whether the range is empty.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40717,"byte_end":40754,"line_start":349,"line_end":349,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":467},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43557,"byte_end":43567,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41548,"byte_end":41615,"line_start":383,"line_end":383,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41616,"byte_end":41619,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41620,"byte_end":41699,"line_start":385,"line_end":385,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41700,"byte_end":41757,"line_start":386,"line_end":386,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41758,"byte_end":41761,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41762,"byte_end":41788,"line_start":388,"line_end":388,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41789,"byte_end":41792,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41793,"byte_end":41867,"line_start":390,"line_end":390,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41868,"byte_end":41948,"line_start":391,"line_end":391,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41949,"byte_end":42029,"line_start":392,"line_end":392,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42030,"byte_end":42033,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42034,"byte_end":42110,"line_start":394,"line_end":394,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42111,"byte_end":42189,"line_start":395,"line_end":395,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42190,"byte_end":42266,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42267,"byte_end":42320,"line_start":397,"line_end":397,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42321,"byte_end":42324,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42325,"byte_end":42401,"line_start":399,"line_end":399,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42402,"byte_end":42465,"line_start":400,"line_end":400,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42466,"byte_end":42469,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42470,"byte_end":42544,"line_start":402,"line_end":402,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42545,"byte_end":42625,"line_start":403,"line_end":403,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42626,"byte_end":42712,"line_start":404,"line_end":404,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42713,"byte_end":42790,"line_start":405,"line_end":405,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42791,"byte_end":42862,"line_start":406,"line_end":406,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42863,"byte_end":42866,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42867,"byte_end":42945,"line_start":408,"line_end":408,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":42946,"byte_end":43023,"line_start":409,"line_end":409,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43024,"byte_end":43103,"line_start":410,"line_end":410,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43104,"byte_end":43178,"line_start":411,"line_end":411,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43179,"byte_end":43226,"line_start":412,"line_end":412,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43227,"byte_end":43230,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43231,"byte_end":43307,"line_start":414,"line_end":414,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43308,"byte_end":43387,"line_start":415,"line_end":415,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":43388,"byte_end":43451,"line_start":416,"line_end":416,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":720},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55823,"byte_end":55834,"line_start":730,"line_end":730,"column_start":12,"column_end":23},"name":"UniformChar","qualname":"::distributions::uniform::UniformChar","value":"UniformChar {  }","parent":null,"children":[{"krate":0,"index":721}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `char`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `char`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55265,"byte_end":55325,"line_start":719,"line_end":719,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55326,"byte_end":55329,"line_start":720,"line_end":720,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55330,"byte_end":55409,"line_start":721,"line_end":721,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55410,"byte_end":55467,"line_start":722,"line_end":722,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55468,"byte_end":55471,"line_start":723,"line_end":723,"column_start":1,"column_end":4}},{"value":"/ This differs from integer range sampling since the range `0xD800..=0xDFFF`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55472,"byte_end":55550,"line_start":724,"line_end":724,"column_start":1,"column_end":79}},{"value":"/ are used for surrogate pairs in UCS and UTF-16, and consequently are not","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55551,"byte_end":55627,"line_start":725,"line_end":725,"column_start":1,"column_end":77}},{"value":"/ valid Unicode code points. We must therefore avoid sampling values in this","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55628,"byte_end":55706,"line_start":726,"line_end":726,"column_start":1,"column_end":79}},{"value":"/ range.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":55707,"byte_end":55717,"line_start":727,"line_end":727,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":727},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58706,"byte_end":58718,"line_start":809,"line_end":809,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57716,"byte_end":57790,"line_start":788,"line_end":788,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57791,"byte_end":57794,"line_start":789,"line_end":789,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57795,"byte_end":57874,"line_start":790,"line_end":790,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57875,"byte_end":57932,"line_start":791,"line_end":791,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57933,"byte_end":57936,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57937,"byte_end":57963,"line_start":793,"line_end":793,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57964,"byte_end":57967,"line_start":794,"line_end":794,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":57968,"byte_end":58047,"line_start":795,"line_end":795,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58048,"byte_end":58125,"line_start":796,"line_end":796,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58126,"byte_end":58172,"line_start":797,"line_end":797,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58173,"byte_end":58176,"line_start":798,"line_end":798,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58177,"byte_end":58255,"line_start":799,"line_end":799,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58256,"byte_end":58328,"line_start":800,"line_end":800,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 23 bits of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58329,"byte_end":58408,"line_start":801,"line_end":801,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58409,"byte_end":58461,"line_start":802,"line_end":802,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58462,"byte_end":58465,"line_start":803,"line_end":803,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58466,"byte_end":58498,"line_start":804,"line_end":804,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58499,"byte_end":58551,"line_start":805,"line_end":805,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":58552,"byte_end":58600,"line_start":806,"line_end":806,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":771},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66846,"byte_end":66861,"line_start":1003,"line_end":1003,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66533,"byte_end":66597,"line_start":997,"line_end":997,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66598,"byte_end":66601,"line_start":998,"line_end":998,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66602,"byte_end":66682,"line_start":999,"line_end":999,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":66683,"byte_end":66740,"line_start":1000,"line_end":1000,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":794},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91160,"byte_end":91172,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90143,"byte_end":90221,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90222,"byte_end":90272,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90273,"byte_end":90276,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90277,"byte_end":90351,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90352,"byte_end":90429,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90430,"byte_end":90503,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90504,"byte_end":90530,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90531,"byte_end":90534,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90535,"byte_end":90601,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90602,"byte_end":90678,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90679,"byte_end":90690,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90691,"byte_end":90694,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90695,"byte_end":90708,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90709,"byte_end":90716,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90717,"byte_end":90749,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90750,"byte_end":90792,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90793,"byte_end":90796,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90797,"byte_end":90850,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90851,"byte_end":90892,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90893,"byte_end":90900,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90901,"byte_end":90904,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90905,"byte_end":90953,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90954,"byte_end":90998,"line_start":42,"line_end":42,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":90999,"byte_end":91054,"line_start":43,"line_end":43,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":801},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92167,"byte_end":92173,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91175,"byte_end":91248,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91249,"byte_end":91307,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91308,"byte_end":91311,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91312,"byte_end":91391,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ the 23 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91392,"byte_end":91471,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91472,"byte_end":91531,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91532,"byte_end":91535,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91536,"byte_end":91608,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91609,"byte_end":91685,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91686,"byte_end":91697,"line_start":57,"line_end":57,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91698,"byte_end":91701,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91702,"byte_end":91715,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91716,"byte_end":91723,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91724,"byte_end":91756,"line_start":61,"line_end":61,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91757,"byte_end":91793,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91794,"byte_end":91797,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91798,"byte_end":91845,"line_start":64,"line_end":64,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91846,"byte_end":91887,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91888,"byte_end":91895,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91896,"byte_end":91899,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91900,"byte_end":91948,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":91949,"byte_end":92005,"line_start":69,"line_end":69,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92006,"byte_end":92061,"line_start":70,"line_end":70,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":157},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92283,"byte_end":92292,"line_start":78,"line_end":78,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":158},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92304,"byte_end":92305,"line_start":79,"line_end":79,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92707,"byte_end":92731,"line_start":89,"line_end":89,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"pub fn into_float_with_exponent(Self, i32) -> Self::F","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a contant exponent into a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92312,"byte_end":92383,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/ float.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92388,"byte_end":92398,"line_start":82,"line_end":82,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92403,"byte_end":92406,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92411,"byte_end":92485,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92490,"byte_end":92507,"line_start":85,"line_end":85,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92512,"byte_end":92586,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92591,"byte_end":92642,"line_start":87,"line_end":87,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/float.rs","byte_start":92647,"byte_end":92699,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":161},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11817,"byte_end":11830,"line_start":121,"line_end":121,"column_start":9,"column_end":22},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":162}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":870},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":113235,"byte_end":113247,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `u8`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.","sig":null,"attributes":[{"value":"/ Sample a `u8`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":111783,"byte_end":111855,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":111856,"byte_end":111877,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":111878,"byte_end":111881,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":111882,"byte_end":111895,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":111896,"byte_end":111899,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":111900,"byte_end":111907,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":111908,"byte_end":111926,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":111927,"byte_end":111959,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":111960,"byte_end":112002,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112003,"byte_end":112006,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112007,"byte_end":112038,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112039,"byte_end":112079,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112080,"byte_end":112127,"line_start":34,"line_end":34,"column_start":1,"column_end":48}},{"value":"/         .map(char::from)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112128,"byte_end":112156,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/         .take(7)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112157,"byte_end":112177,"line_start":36,"line_end":36,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112178,"byte_end":112201,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112202,"byte_end":112242,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112243,"byte_end":112250,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112251,"byte_end":112254,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Passwords","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112255,"byte_end":112270,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112271,"byte_end":112274,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Users sometimes ask whether it is safe to use a string of random characters","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112275,"byte_end":112354,"line_start":43,"line_end":43,"column_start":1,"column_end":80}},{"value":"/ as a password. In principle, all RNGs in Rand implementing `CryptoRng` are","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112355,"byte_end":112433,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ suitable as a source of randomness for generating passwords (if they are","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112434,"byte_end":112510,"line_start":45,"line_end":45,"column_start":1,"column_end":77}},{"value":"/ properly seeded), but it is more conservative to only use randomness","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112511,"byte_end":112583,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ directly from the operating system via the `getrandom` crate, or the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112584,"byte_end":112656,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/ corresponding bindings of a crypto library.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112657,"byte_end":112704,"line_start":48,"line_end":48,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112705,"byte_end":112708,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ When generating passwords or keys, it is important to consider the threat","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112709,"byte_end":112786,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/ model and in some cases the memorability of the password. This is out of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112787,"byte_end":112863,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"/ scope of the Rand project, and therefore we defer to the following","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112864,"byte_end":112934,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/ references:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112935,"byte_end":112950,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112951,"byte_end":112954,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ - [Wikipedia article on Password Strength](https://en.wikipedia.org/wiki/Password_strength)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":112955,"byte_end":113050,"line_start":55,"line_end":55,"column_start":1,"column_end":96}},{"value":"/ - [Diceware for generating memorable passwords](https://en.wikipedia.org/wiki/Diceware)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":113051,"byte_end":113142,"line_start":56,"line_end":56,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":231},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":121540,"byte_end":121546,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":240},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":128540,"byte_end":128544,"line_start":220,"line_end":220,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":245},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":129059,"byte_end":129063,"line_start":232,"line_end":232,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":236},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":265},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12951,"byte_end":12963,"line_start":146,"line_end":146,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":267},{"krate":0,"index":269}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11930,"byte_end":12008,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12009,"byte_end":12012,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12013,"byte_end":12078,"line_start":130,"line_end":130,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12079,"byte_end":12150,"line_start":131,"line_end":131,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12151,"byte_end":12230,"line_start":132,"line_end":132,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12231,"byte_end":12291,"line_start":133,"line_end":133,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12292,"byte_end":12295,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12296,"byte_end":12374,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12375,"byte_end":12443,"line_start":136,"line_end":136,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12444,"byte_end":12517,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12518,"byte_end":12521,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12522,"byte_end":12597,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12598,"byte_end":12656,"line_start":140,"line_end":140,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12657,"byte_end":12735,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12736,"byte_end":12814,"line_start":142,"line_end":142,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12815,"byte_end":12882,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12883,"byte_end":12886,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::method.sample_iter","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12887,"byte_end":12940,"line_start":145,"line_end":145,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13057,"byte_end":13063,"line_start":148,"line_end":148,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> T","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":12973,"byte_end":13049,"line_start":147,"line_end":147,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14357,"byte_end":14368,"line_start":184,"line_end":184,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"pub fn sample_iter<R>(Self, R) -> DistIter<Self, R, T> where R: Rng,\nSelf: Sized","parent":{"krate":0,"index":265},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13112,"byte_end":13186,"line_start":150,"line_end":150,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13191,"byte_end":13220,"line_start":151,"line_end":151,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13225,"byte_end":13228,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13233,"byte_end":13300,"line_start":153,"line_end":153,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13305,"byte_end":13373,"line_start":154,"line_end":154,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13378,"byte_end":13451,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13456,"byte_end":13525,"line_start":156,"line_end":156,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13530,"byte_end":13597,"line_start":157,"line_end":157,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13602,"byte_end":13605,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13610,"byte_end":13623,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13628,"byte_end":13631,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13636,"byte_end":13643,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13648,"byte_end":13673,"line_start":162,"line_end":162,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13678,"byte_end":13755,"line_start":163,"line_end":163,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13760,"byte_end":13763,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13768,"byte_end":13799,"line_start":165,"line_end":165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13804,"byte_end":13807,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13812,"byte_end":13835,"line_start":167,"line_end":167,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(&mut rng).take(16).collect();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13840,"byte_end":13912,"line_start":168,"line_end":168,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13917,"byte_end":13920,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13925,"byte_end":13939,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13944,"byte_end":13976,"line_start":171,"line_end":171,"column_start":5,"column_end":37}},{"value":"/     .sample_iter(&mut rng)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":13981,"byte_end":14011,"line_start":172,"line_end":172,"column_start":5,"column_end":35}},{"value":"/     .take(7)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14016,"byte_end":14032,"line_start":173,"line_end":173,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14037,"byte_end":14061,"line_start":174,"line_end":174,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14066,"byte_end":14085,"line_start":175,"line_end":175,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14090,"byte_end":14093,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14098,"byte_end":14118,"line_start":177,"line_end":177,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14123,"byte_end":14172,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(&mut rng);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14177,"byte_end":14232,"line_start":179,"line_end":179,"column_start":5,"column_end":60}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14237,"byte_end":14278,"line_start":180,"line_end":180,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14283,"byte_end":14327,"line_start":181,"line_end":181,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14332,"byte_end":14337,"line_start":182,"line_end":182,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14342,"byte_end":14349,"line_start":183,"line_end":183,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1237},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15066,"byte_end":15074,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14749,"byte_end":14823,"line_start":204,"line_end":204,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14824,"byte_end":14866,"line_start":205,"line_end":205,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14867,"byte_end":14870,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14871,"byte_end":14950,"line_start":207,"line_end":207,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14951,"byte_end":14986,"line_start":208,"line_end":208,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14987,"byte_end":14990,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":14991,"byte_end":15037,"line_start":210,"line_end":210,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1249},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":19259,"byte_end":19267,"line_start":332,"line_end":332,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15958,"byte_end":16036,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16037,"byte_end":16117,"line_start":255,"line_end":255,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16118,"byte_end":16152,"line_start":256,"line_end":256,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16153,"byte_end":16156,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16157,"byte_end":16188,"line_start":258,"line_end":258,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16189,"byte_end":16192,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16193,"byte_end":16263,"line_start":260,"line_end":260,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16264,"byte_end":16328,"line_start":261,"line_end":261,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16329,"byte_end":16332,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16333,"byte_end":16409,"line_start":263,"line_end":263,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16410,"byte_end":16444,"line_start":264,"line_end":264,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16445,"byte_end":16521,"line_start":265,"line_end":265,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16522,"byte_end":16590,"line_start":266,"line_end":266,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16591,"byte_end":16657,"line_start":267,"line_end":267,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16658,"byte_end":16696,"line_start":268,"line_end":268,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16697,"byte_end":16766,"line_start":269,"line_end":269,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16767,"byte_end":16841,"line_start":270,"line_end":270,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16842,"byte_end":16890,"line_start":271,"line_end":271,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16891,"byte_end":16967,"line_start":272,"line_end":272,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16968,"byte_end":16998,"line_start":273,"line_end":273,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":16999,"byte_end":17002,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17003,"byte_end":17076,"line_start":275,"line_end":275,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17077,"byte_end":17136,"line_start":276,"line_end":276,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17137,"byte_end":17140,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17141,"byte_end":17216,"line_start":278,"line_end":278,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17217,"byte_end":17292,"line_start":279,"line_end":279,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17293,"byte_end":17373,"line_start":280,"line_end":280,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17374,"byte_end":17439,"line_start":281,"line_end":281,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17440,"byte_end":17519,"line_start":282,"line_end":282,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17520,"byte_end":17587,"line_start":283,"line_end":283,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17588,"byte_end":17591,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17592,"byte_end":17621,"line_start":285,"line_end":285,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17622,"byte_end":17625,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17626,"byte_end":17705,"line_start":287,"line_end":287,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17706,"byte_end":17709,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17710,"byte_end":17717,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17718,"byte_end":17744,"line_start":290,"line_end":290,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17745,"byte_end":17763,"line_start":291,"line_end":291,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17764,"byte_end":17818,"line_start":292,"line_end":292,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17819,"byte_end":17822,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17823,"byte_end":17841,"line_start":294,"line_end":294,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17842,"byte_end":17857,"line_start":295,"line_end":295,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17858,"byte_end":17863,"line_start":296,"line_end":296,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17864,"byte_end":17867,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17868,"byte_end":17911,"line_start":298,"line_end":298,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17912,"byte_end":17977,"line_start":299,"line_end":299,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":17978,"byte_end":18012,"line_start":300,"line_end":300,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18013,"byte_end":18022,"line_start":301,"line_end":301,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18023,"byte_end":18028,"line_start":302,"line_end":302,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18029,"byte_end":18036,"line_start":303,"line_end":303,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18037,"byte_end":18040,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18041,"byte_end":18061,"line_start":305,"line_end":305,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18062,"byte_end":18069,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18070,"byte_end":18095,"line_start":307,"line_end":307,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18096,"byte_end":18134,"line_start":308,"line_end":308,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18135,"byte_end":18138,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18139,"byte_end":18198,"line_start":310,"line_end":310,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18199,"byte_end":18240,"line_start":311,"line_end":311,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18241,"byte_end":18248,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18249,"byte_end":18252,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18253,"byte_end":18288,"line_start":314,"line_end":314,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18289,"byte_end":18369,"line_start":315,"line_end":315,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18370,"byte_end":18434,"line_start":316,"line_end":316,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18435,"byte_end":18438,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18439,"byte_end":18513,"line_start":318,"line_end":318,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18514,"byte_end":18591,"line_start":319,"line_end":319,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18592,"byte_end":18665,"line_start":320,"line_end":320,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18666,"byte_end":18736,"line_start":321,"line_end":321,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18737,"byte_end":18740,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18741,"byte_end":18817,"line_start":323,"line_end":323,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0..1)` which also samples from","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18818,"byte_end":18894,"line_start":324,"line_end":324,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` uses transmute-based methods which yield 1 bit","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18895,"byte_end":18974,"line_start":325,"line_end":325,"column_start":1,"column_end":80}},{"value":"/ less precision but may perform faster on some architectures (on modern Intel","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":18975,"byte_end":19055,"line_start":326,"line_end":326,"column_start":1,"column_end":81}},{"value":"/ CPUs all methods have approximately equal performance).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":19056,"byte_end":19115,"line_start":327,"line_end":327,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":19116,"byte_end":19119,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":19120,"byte_end":19153,"line_start":329,"line_end":329,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":288},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"/ Convenience re-export of common members","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135001,"byte_end":135044,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135045,"byte_end":135048,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135049,"byte_end":135125,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135126,"byte_end":135205,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ be imported manually:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135206,"byte_end":135231,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135232,"byte_end":135235,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135236,"byte_end":135243,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135244,"byte_end":135269,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/ # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135270,"byte_end":135328,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/ # let _: f32 = r.gen();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135329,"byte_end":135356,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/prelude.rs","byte_start":135357,"byte_end":135364,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":314},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138090,"byte_end":138093,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"Rng","qualname":"::rng::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":332}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136563,"byte_end":136647,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136648,"byte_end":136718,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136719,"byte_end":136722,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136723,"byte_end":136790,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136791,"byte_end":136794,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136795,"byte_end":136814,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136815,"byte_end":136818,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136819,"byte_end":136888,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136889,"byte_end":136922,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136923,"byte_end":136926,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":136927,"byte_end":137003,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137004,"byte_end":137061,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137062,"byte_end":137136,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137137,"byte_end":137213,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137214,"byte_end":137270,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137271,"byte_end":137274,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137275,"byte_end":137354,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137355,"byte_end":137434,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137435,"byte_end":137514,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137515,"byte_end":137593,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137594,"byte_end":137670,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137671,"byte_end":137745,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137746,"byte_end":137822,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137823,"byte_end":137875,"line_start":41,"line_end":41,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137876,"byte_end":137879,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137880,"byte_end":137892,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137893,"byte_end":137896,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137897,"byte_end":137904,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137905,"byte_end":137932,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137933,"byte_end":137951,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137952,"byte_end":137955,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":137956,"byte_end":138005,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138006,"byte_end":138023,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138024,"byte_end":138029,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138030,"byte_end":138033,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138034,"byte_end":138071,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138072,"byte_end":138079,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139243,"byte_end":139246,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"gen","qualname":"::rng::Rng::gen","value":"pub fn gen<T>(&mut Self) -> T where Standard: Distribution<T>","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138109,"byte_end":138176,"line_start":56,"line_end":56,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138181,"byte_end":138184,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138189,"byte_end":138202,"line_start":58,"line_end":58,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138207,"byte_end":138210,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138215,"byte_end":138222,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138227,"byte_end":138259,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138264,"byte_end":138267,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138272,"byte_end":138303,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138308,"byte_end":138335,"line_start":64,"line_end":64,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138340,"byte_end":138362,"line_start":65,"line_end":65,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138367,"byte_end":138414,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138419,"byte_end":138426,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138431,"byte_end":138434,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138439,"byte_end":138462,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138467,"byte_end":138470,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138475,"byte_end":138548,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138553,"byte_end":138624,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138629,"byte_end":138643,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138648,"byte_end":138651,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138656,"byte_end":138729,"line_start":75,"line_end":75,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138734,"byte_end":138804,"line_start":76,"line_end":76,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138809,"byte_end":138812,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138817,"byte_end":138824,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138829,"byte_end":138861,"line_start":79,"line_end":79,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138866,"byte_end":138869,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138874,"byte_end":138905,"line_start":81,"line_end":81,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138910,"byte_end":138980,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138985,"byte_end":138988,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138993,"byte_end":139058,"line_start":84,"line_end":84,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139063,"byte_end":139093,"line_start":85,"line_end":85,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139098,"byte_end":139155,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139160,"byte_end":139167,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139172,"byte_end":139175,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139180,"byte_end":139221,"line_start":89,"line_end":89,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139226,"byte_end":139235,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140281,"byte_end":140290,"line_start":127,"line_end":127,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::rng::Rng::gen_range","value":"pub fn gen_range<T, R>(&mut Self, R) -> T where T: SampleUniform,\nR: SampleRange<T>","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Generate a random value in the given range.","sig":null,"attributes":[{"value":"/ Generate a random value in the given range.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139345,"byte_end":139392,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139397,"byte_end":139400,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139405,"byte_end":139477,"line_start":98,"line_end":98,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139482,"byte_end":139550,"line_start":99,"line_end":99,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139555,"byte_end":139627,"line_start":100,"line_end":100,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139632,"byte_end":139635,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Only `gen_range(low..high)` and `gen_range(low..=high)` are supported.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139640,"byte_end":139714,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139719,"byte_end":139722,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139727,"byte_end":139739,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139744,"byte_end":139747,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Panics if the range is empty.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139752,"byte_end":139785,"line_start":106,"line_end":106,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139790,"byte_end":139793,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139798,"byte_end":139811,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139816,"byte_end":139819,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139824,"byte_end":139831,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139836,"byte_end":139868,"line_start":111,"line_end":111,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139873,"byte_end":139876,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139881,"byte_end":139912,"line_start":113,"line_end":113,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139917,"byte_end":139920,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ // Exclusive range","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139925,"byte_end":139947,"line_start":115,"line_end":115,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..10);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139952,"byte_end":139990,"line_start":116,"line_end":116,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":139995,"byte_end":140017,"line_start":117,"line_end":117,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0..1.3e5);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140022,"byte_end":140067,"line_start":118,"line_end":118,"column_start":5,"column_end":50}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140072,"byte_end":140094,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140099,"byte_end":140102,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ // Inclusive range","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140107,"byte_end":140129,"line_start":121,"line_end":121,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..=10);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140134,"byte_end":140173,"line_start":122,"line_end":122,"column_start":5,"column_end":44}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140178,"byte_end":140200,"line_start":123,"line_end":123,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140205,"byte_end":140212,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140217,"byte_end":140220,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140225,"byte_end":140273,"line_start":126,"line_end":126,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140977,"byte_end":140983,"line_start":150,"line_end":150,"column_start":8,"column_end":14},"name":"sample","qualname":"::rng::Rng::sample","value":"pub fn sample<T, D: Distribution<T>>(&mut Self, D) -> T","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140501,"byte_end":140554,"line_start":136,"line_end":136,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140559,"byte_end":140562,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140567,"byte_end":140582,"line_start":138,"line_end":138,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140587,"byte_end":140590,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140595,"byte_end":140602,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140607,"byte_end":140639,"line_start":141,"line_end":141,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140644,"byte_end":140681,"line_start":142,"line_end":142,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140686,"byte_end":140689,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140694,"byte_end":140725,"line_start":144,"line_end":144,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140730,"byte_end":140778,"line_start":145,"line_end":145,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140783,"byte_end":140856,"line_start":146,"line_end":146,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140861,"byte_end":140897,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140902,"byte_end":140957,"line_start":148,"line_end":148,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":140962,"byte_end":140969,"line_start":149,"line_end":149,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142384,"byte_end":142395,"line_start":190,"line_end":190,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::rng::Rng::sample_iter","value":"pub fn sample_iter<T, D>(Self, D) -> distributions::DistIter<D, Self, T> where\nD: Distribution<T>, Self: Sized","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141073,"byte_end":141147,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141152,"byte_end":141155,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141160,"byte_end":141234,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141239,"byte_end":141275,"line_start":157,"line_end":157,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141280,"byte_end":141327,"line_start":158,"line_end":158,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141332,"byte_end":141403,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141408,"byte_end":141467,"line_start":160,"line_end":160,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141472,"byte_end":141475,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141480,"byte_end":141493,"line_start":162,"line_end":162,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141498,"byte_end":141501,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141506,"byte_end":141513,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141518,"byte_end":141550,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141555,"byte_end":141618,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141623,"byte_end":141626,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141631,"byte_end":141662,"line_start":168,"line_end":168,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141667,"byte_end":141670,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141675,"byte_end":141698,"line_start":170,"line_end":170,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = (&mut rng).sample_iter(Standard).take(16).collect();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141703,"byte_end":141777,"line_start":171,"line_end":171,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141782,"byte_end":141785,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141790,"byte_end":141804,"line_start":173,"line_end":173,"column_start":5,"column_end":19}},{"value":"/ let s: String = (&mut rng).sample_iter(Alphanumeric)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141809,"byte_end":141865,"line_start":174,"line_end":174,"column_start":5,"column_end":61}},{"value":"/     .take(7)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141870,"byte_end":141886,"line_start":175,"line_end":175,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141891,"byte_end":141915,"line_start":176,"line_end":176,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141920,"byte_end":141939,"line_start":177,"line_end":177,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141944,"byte_end":141947,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141952,"byte_end":141974,"line_start":179,"line_end":179,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", (&mut rng).sample_iter(Standard).take(5)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":141979,"byte_end":142040,"line_start":180,"line_end":180,"column_start":5,"column_end":66}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142045,"byte_end":142110,"line_start":181,"line_end":181,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142115,"byte_end":142118,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142123,"byte_end":142143,"line_start":183,"line_end":183,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142148,"byte_end":142197,"line_start":184,"line_end":184,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = (&mut rng).sample_iter(die_range);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142202,"byte_end":142259,"line_start":185,"line_end":185,"column_start":5,"column_end":62}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142264,"byte_end":142305,"line_start":186,"line_end":186,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142310,"byte_end":142354,"line_start":187,"line_end":187,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142359,"byte_end":142364,"line_start":188,"line_end":188,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142369,"byte_end":142376,"line_start":189,"line_end":189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143129,"byte_end":143133,"line_start":216,"line_end":216,"column_start":8,"column_end":12},"name":"fill","qualname":"::rng::Rng::fill","value":"pub fn fill<T: Fill + ?Sized>(&mut Self, &mut T)","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142565,"byte_end":142621,"line_start":198,"line_end":198,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142626,"byte_end":142629,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142634,"byte_end":142707,"line_start":200,"line_end":200,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142712,"byte_end":142774,"line_start":201,"line_end":201,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142779,"byte_end":142782,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`try_fill`] except that it panics on error.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142787,"byte_end":142856,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142861,"byte_end":142864,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142869,"byte_end":142882,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142887,"byte_end":142890,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142895,"byte_end":142902,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142907,"byte_end":142939,"line_start":208,"line_end":208,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142944,"byte_end":142947,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142952,"byte_end":142980,"line_start":210,"line_end":210,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":142985,"byte_end":143021,"line_start":211,"line_end":211,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143026,"byte_end":143033,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143038,"byte_end":143041,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143046,"byte_end":143085,"line_start":214,"line_end":214,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143090,"byte_end":143121,"line_start":215,"line_end":215,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143973,"byte_end":143981,"line_start":244,"line_end":244,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Rng::try_fill","value":"pub fn try_fill<T: Fill + ?Sized>(&mut Self, &mut T) -> Result<(), Error>","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143265,"byte_end":143321,"line_start":220,"line_end":220,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143326,"byte_end":143329,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143334,"byte_end":143407,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143412,"byte_end":143474,"line_start":223,"line_end":223,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143479,"byte_end":143482,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it forwards errors.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143487,"byte_end":143552,"line_start":225,"line_end":225,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143557,"byte_end":143560,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143565,"byte_end":143578,"line_start":227,"line_end":227,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143583,"byte_end":143586,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143591,"byte_end":143598,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143603,"byte_end":143625,"line_start":230,"line_end":230,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143630,"byte_end":143662,"line_start":231,"line_end":231,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143667,"byte_end":143670,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143675,"byte_end":143718,"line_start":233,"line_end":233,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143723,"byte_end":143751,"line_start":234,"line_end":234,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143756,"byte_end":143797,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143802,"byte_end":143814,"line_start":236,"line_end":236,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143819,"byte_end":143826,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143831,"byte_end":143834,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143839,"byte_end":143865,"line_start":239,"line_end":239,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143870,"byte_end":143877,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143882,"byte_end":143885,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143890,"byte_end":143937,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":143942,"byte_end":143965,"line_start":243,"line_end":243,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144607,"byte_end":144615,"line_start":268,"line_end":268,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::rng::Rng::gen_bool","value":"pub fn gen_bool(&mut Self, f64) -> bool","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144087,"byte_end":144142,"line_start":248,"line_end":248,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144147,"byte_end":144150,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144155,"byte_end":144222,"line_start":250,"line_end":250,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144227,"byte_end":144277,"line_start":251,"line_end":251,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144282,"byte_end":144285,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144290,"byte_end":144303,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144308,"byte_end":144311,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144316,"byte_end":144323,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144328,"byte_end":144360,"line_start":256,"line_end":256,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144365,"byte_end":144368,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144373,"byte_end":144404,"line_start":258,"line_end":258,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144409,"byte_end":144453,"line_start":259,"line_end":259,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144458,"byte_end":144465,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144470,"byte_end":144473,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144478,"byte_end":144490,"line_start":262,"line_end":262,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144495,"byte_end":144498,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144503,"byte_end":144529,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144534,"byte_end":144537,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144542,"byte_end":144585,"line_start":266,"line_end":266,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144590,"byte_end":144599,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145591,"byte_end":145600,"line_start":297,"line_end":297,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::rng::Rng::gen_ratio","value":"pub fn gen_ratio(&mut Self, u32, u32) -> bool","parent":{"krate":0,"index":314},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144738,"byte_end":144810,"line_start":273,"line_end":273,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144815,"byte_end":144886,"line_start":274,"line_end":274,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144891,"byte_end":144965,"line_start":275,"line_end":275,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":144970,"byte_end":145040,"line_start":276,"line_end":276,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145045,"byte_end":145083,"line_start":277,"line_end":277,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145088,"byte_end":145091,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145096,"byte_end":145163,"line_start":279,"line_end":279,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145168,"byte_end":145236,"line_start":280,"line_end":280,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145241,"byte_end":145244,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145249,"byte_end":145261,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145266,"byte_end":145269,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145274,"byte_end":145329,"line_start":284,"line_end":284,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145334,"byte_end":145337,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145342,"byte_end":145355,"line_start":286,"line_end":286,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145360,"byte_end":145363,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145368,"byte_end":145375,"line_start":288,"line_end":288,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145380,"byte_end":145412,"line_start":289,"line_end":289,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145417,"byte_end":145420,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145425,"byte_end":145456,"line_start":291,"line_end":291,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145461,"byte_end":145501,"line_start":292,"line_end":292,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145506,"byte_end":145513,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145518,"byte_end":145521,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145526,"byte_end":145569,"line_start":295,"line_end":295,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145574,"byte_end":145583,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":335},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":146149,"byte_end":146153,"line_start":312,"line_end":312,"column_start":11,"column_end":15},"name":"Fill","qualname":"::rng::Fill","value":"Fill","parent":null,"children":[{"krate":0,"index":336}],"decl_id":null,"docs":" Types which may be filled with random data","sig":null,"attributes":[{"value":"/ Types which may be filled with random data","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145815,"byte_end":145861,"line_start":305,"line_end":305,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145862,"byte_end":145865,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ This trait allows arrays to be efficiently filled with random data.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145866,"byte_end":145937,"line_start":307,"line_end":307,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145938,"byte_end":145941,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ Implementations are expected to be portable across machines unless","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145942,"byte_end":146012,"line_start":309,"line_end":309,"column_start":1,"column_end":71}},{"value":"/ clearly documented otherwise (see the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":146013,"byte_end":146054,"line_start":310,"line_end":310,"column_start":1,"column_end":42}},{"value":"/ [Chapter on Portability](https://rust-random.github.io/book/portability.html)).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":146055,"byte_end":146138,"line_start":311,"line_end":311,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":146198,"byte_end":146206,"line_start":314,"line_end":314,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Fill::try_fill","value":"pub fn try_fill<R: Rng + ?Sized>(&mut Self, &mut R) -> Result<(), Error>","parent":{"krate":0,"index":335},"children":[],"decl_id":null,"docs":" Fill self with random data\n","sig":null,"attributes":[{"value":"/ Fill self with random data","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":146160,"byte_end":146190,"line_start":313,"line_end":313,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":344},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":357},{"krate":0,"index":378},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":1739}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"/ Random number generators and adapters","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":154668,"byte_end":154709,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":154710,"byte_end":154713,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Background: Random number generators (RNGs)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":154714,"byte_end":154764,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":154765,"byte_end":154768,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":154769,"byte_end":154838,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ random number generators as follows:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":154839,"byte_end":154879,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":154880,"byte_end":154883,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":154884,"byte_end":154964,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":154965,"byte_end":155043,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155044,"byte_end":155117,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155118,"byte_end":155198,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155199,"byte_end":155278,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/     a hardware generator (HRNG).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155279,"byte_end":155315,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"/ -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155316,"byte_end":155395,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155396,"byte_end":155474,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155475,"byte_end":155555,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155556,"byte_end":155632,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155633,"byte_end":155713,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155714,"byte_end":155794,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155795,"byte_end":155869,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155870,"byte_end":155946,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":155947,"byte_end":156023,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156024,"byte_end":156102,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156103,"byte_end":156106,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Traits and functionality","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156107,"byte_end":156138,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156139,"byte_end":156142,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156143,"byte_end":156218,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156219,"byte_end":156292,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ additionally implement the [`CryptoRng`] trait.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156293,"byte_end":156344,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156345,"byte_end":156348,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156349,"byte_end":156422,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156423,"byte_end":156491,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156492,"byte_end":156495,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156496,"byte_end":156551,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"/ -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156552,"byte_end":156616,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/ -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156617,"byte_end":156693,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156694,"byte_end":156757,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156758,"byte_end":156761,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156762,"byte_end":156826,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156827,"byte_end":156830,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Our generators","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156831,"byte_end":156852,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156853,"byte_end":156856,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ This crate provides several random number generators:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156857,"byte_end":156914,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156915,"byte_end":156918,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156919,"byte_end":156992,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":156993,"byte_end":157066,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157067,"byte_end":157131,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/ -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157132,"byte_end":157212,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157213,"byte_end":157291,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157292,"byte_end":157366,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"/     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157367,"byte_end":157424,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"/ -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157425,"byte_end":157505,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/     (based on reviews, maturity and usage). The current algorithm is ChaCha12,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157506,"byte_end":157588,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"/     which is well established and rigorously analysed.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157589,"byte_end":157647,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"/     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157648,"byte_end":157723,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/     periodic reseeding.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157724,"byte_end":157751,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157752,"byte_end":157833,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/     little memory, and have good output quality.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157834,"byte_end":157886,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157887,"byte_end":157890,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157891,"byte_end":157968,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ release and may be platform-dependent, therefore they should be considered","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":157969,"byte_end":158047,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ **not reproducible**.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158048,"byte_end":158073,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158074,"byte_end":158077,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ## Additional generators","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158078,"byte_end":158106,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158107,"byte_end":158110,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158111,"byte_end":158186,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158187,"byte_end":158250,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"/ The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158251,"byte_end":158320,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"/ entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158321,"byte_end":158391,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/ [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158392,"byte_end":158462,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158463,"byte_end":158466,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158467,"byte_end":158545,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158546,"byte_end":158619,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/ [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158620,"byte_end":158698,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ be used directly when **reproducibility** matters.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158699,"byte_end":158753,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"/ Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158754,"byte_end":158828,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158829,"byte_end":158903,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158904,"byte_end":158907,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ [`Rng`]: crate::Rng","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158908,"byte_end":158931,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158932,"byte_end":158963,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"/ [`CryptoRng`]: crate::CryptoRng","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":158964,"byte_end":158999,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/ [`SeedableRng`]: crate::SeedableRng","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":159000,"byte_end":159039,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"/ [`thread_rng`]: crate::thread_rng","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":159040,"byte_end":159077,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":159078,"byte_end":159125,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/ [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":159126,"byte_end":159183,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"/ [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":159184,"byte_end":159241,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"/ [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":159242,"byte_end":159293,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":159294,"byte_end":159353,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/ [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":159354,"byte_end":159401,"line_start":97,"line_end":97,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":345},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":1534},{"krate":0,"index":1546},{"krate":0,"index":1544},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":350},{"krate":0,"index":352}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"/ Mock random number generator","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":160630,"byte_end":160662,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1534},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161332,"byte_end":161339,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":1535},{"krate":0,"index":1536}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":160770,"byte_end":160832,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":160833,"byte_end":160836,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":160837,"byte_end":160911,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":160912,"byte_end":160985,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":160986,"byte_end":161022,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161023,"byte_end":161026,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161027,"byte_end":161034,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161035,"byte_end":161053,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161054,"byte_end":161088,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161089,"byte_end":161092,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161093,"byte_end":161133,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161134,"byte_end":161174,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161175,"byte_end":161209,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161210,"byte_end":161217,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161529,"byte_end":161532,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"pub fn new(u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161388,"byte_end":161457,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161462,"byte_end":161517,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1548},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163623,"byte_end":163641,"line_start":24,"line_end":24,"column_start":12,"column_end":30},"name":"Xoshiro256PlusPlus","qualname":"::rngs::xoshiro256plusplus::Xoshiro256PlusPlus","value":"Xoshiro256PlusPlus {  }","parent":null,"children":[{"krate":0,"index":1549}],"decl_id":null,"docs":" A xoshiro256** random number generator.","sig":null,"attributes":[{"value":"/ A xoshiro256** random number generator.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163126,"byte_end":163169,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163170,"byte_end":163173,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The xoshiro256** algorithm is not suitable for cryptographic purposes, but","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163174,"byte_end":163252,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ is very fast and has excellent statistical properties.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163253,"byte_end":163311,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163312,"byte_end":163315,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The algorithm used here is translated from [the `xoshiro256plusplus.c`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163316,"byte_end":163390,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ reference source code](http://xoshiro.di.unimi.it/xoshiro256plusplus.c) by","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163391,"byte_end":163469,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ David Blackman and Sebastiano Vigna.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163470,"byte_end":163510,"line_start":21,"line_end":21,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1563},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169991,"byte_end":169999,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"SmallRng","qualname":"::rngs::small::SmallRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A small-state, fast non-crypto PRNG","sig":null,"attributes":[{"value":"/ A small-state, fast non-crypto PRNG","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167096,"byte_end":167135,"line_start":18,"line_end":18,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167136,"byte_end":167139,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ `SmallRng` may be a good choice when a PRNG with small state, cheap","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167140,"byte_end":167211,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ initialization, good statistical quality and good performance are required.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167212,"byte_end":167291,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ Note that depending on the application, [`StdRng`] may be faster on many","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167292,"byte_end":167368,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ modern platforms while providing higher-quality randomness. Furthermore,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167369,"byte_end":167445,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ `SmallRng` is **not** a good choice when:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167446,"byte_end":167491,"line_start":24,"line_end":24,"column_start":1,"column_end":46}},{"value":"/ - Security against prediction is important. Use [`StdRng`] instead.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167492,"byte_end":167563,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/ - Seeds with many zeros are provided. In such cases, it takes `SmallRng`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167564,"byte_end":167640,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/   about 10 samples to produce 0 and 1 bits with equal probability. Either","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167641,"byte_end":167718,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/   provide seeds with an approximately equal number of 0 and 1 (for example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167719,"byte_end":167797,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/   by using [`SeedableRng::from_entropy`] or [`SeedableRng::seed_from_u64`]),","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167798,"byte_end":167878,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   or use [`StdRng`] instead.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167879,"byte_end":167911,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167912,"byte_end":167915,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167916,"byte_end":167992,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/ due to dependence on platform and possible replacement in future","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":167993,"byte_end":168061,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ library versions. For a reproducible generator, use a named PRNG from an","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168062,"byte_end":168138,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ external crate, e.g. [rand_xoshiro] or [rand_chacha].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168139,"byte_end":168196,"line_start":35,"line_end":35,"column_start":1,"column_end":58}},{"value":"/ Refer also to [The Book](https://rust-random.github.io/book/guide-rngs.html).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168197,"byte_end":168278,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168279,"byte_end":168282,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The PRNG algorithm in `SmallRng` is chosen to be efficient on the current","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168283,"byte_end":168360,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/ platform, without consideration for cryptography or security. The size of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168361,"byte_end":168438,"line_start":39,"line_end":39,"column_start":1,"column_end":78}},{"value":"/ its state is much smaller than [`StdRng`]. The current algorithm is","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168439,"byte_end":168510,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ `Xoshiro256PlusPlus` on 64-bit platforms and `Xoshiro128PlusPlus` on 32-bit","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168511,"byte_end":168590,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/ platforms. Both are also implemented by the [rand_xoshiro] crate.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168591,"byte_end":168660,"line_start":42,"line_end":42,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168661,"byte_end":168664,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168665,"byte_end":168679,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168680,"byte_end":168683,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Initializing `SmallRng` with a random seed can be done using [`SeedableRng::from_entropy`]:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168684,"byte_end":168779,"line_start":46,"line_end":46,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168780,"byte_end":168783,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168784,"byte_end":168791,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ use rand::{Rng, SeedableRng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168792,"byte_end":168825,"line_start":49,"line_end":49,"column_start":1,"column_end":34}},{"value":"/ use rand::rngs::SmallRng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168826,"byte_end":168855,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168856,"byte_end":168859,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // Create small, cheap to initialize and fast RNG with a random seed.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168860,"byte_end":168933,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ // The randomness is supplied by the operating system.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168934,"byte_end":168992,"line_start":53,"line_end":53,"column_start":1,"column_end":59}},{"value":"/ let mut small_rng = SmallRng::from_entropy();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":168993,"byte_end":169042,"line_start":54,"line_end":54,"column_start":1,"column_end":50}},{"value":"/ # let v: u32 = small_rng.gen();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169043,"byte_end":169078,"line_start":55,"line_end":55,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169079,"byte_end":169086,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169087,"byte_end":169090,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ When initializing a lot of `SmallRng`'s, using [`thread_rng`] can be more","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169091,"byte_end":169168,"line_start":58,"line_end":58,"column_start":1,"column_end":78}},{"value":"/ efficient:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169169,"byte_end":169183,"line_start":59,"line_end":59,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169184,"byte_end":169187,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169188,"byte_end":169195,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::{SeedableRng, thread_rng};","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169196,"byte_end":169236,"line_start":62,"line_end":62,"column_start":1,"column_end":41}},{"value":"/ use rand::rngs::SmallRng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169237,"byte_end":169266,"line_start":63,"line_end":63,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169267,"byte_end":169270,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Create a big, expensive to initialize and slower, but unpredictable RNG.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169271,"byte_end":169350,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/ // This is cached and done only once per thread.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169351,"byte_end":169403,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/ let mut thread_rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169404,"byte_end":169442,"line_start":67,"line_end":67,"column_start":1,"column_end":39}},{"value":"/ // Create small, cheap to initialize and fast RNGs with random seeds.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169443,"byte_end":169516,"line_start":68,"line_end":68,"column_start":1,"column_end":74}},{"value":"/ // One can generally assume this won't fail.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169517,"byte_end":169565,"line_start":69,"line_end":69,"column_start":1,"column_end":49}},{"value":"/ let rngs: Vec<SmallRng> = (0..10)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169566,"byte_end":169603,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/     .map(|_| SmallRng::from_rng(&mut thread_rng).unwrap())","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169604,"byte_end":169666,"line_start":71,"line_end":71,"column_start":1,"column_end":63}},{"value":"/     .collect();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169667,"byte_end":169686,"line_start":72,"line_end":72,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169687,"byte_end":169694,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169695,"byte_end":169698,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169699,"byte_end":169734,"line_start":75,"line_end":75,"column_start":1,"column_end":36}},{"value":"/ [`thread_rng`]: crate::thread_rng","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169735,"byte_end":169772,"line_start":76,"line_end":76,"column_start":1,"column_end":38}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169773,"byte_end":169828,"line_start":77,"line_end":77,"column_start":1,"column_end":56}},{"value":"/ [rand_xoshiro]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":169829,"byte_end":169886,"line_start":78,"line_end":78,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":396},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":408},{"krate":0,"index":416},{"krate":0,"index":427},{"krate":0,"index":429}],"decl_id":null,"docs":" Sequence-related functionality","sig":null,"attributes":[{"value":"/ Sequence-related functionality","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171146,"byte_end":171180,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171181,"byte_end":171184,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module provides:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171185,"byte_end":171210,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171211,"byte_end":171214,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ *   [`SliceRandom`] slice sampling and mutation","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171215,"byte_end":171266,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ *   [`IteratorRandom`] iterator sampling","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171267,"byte_end":171311,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ *   [`index::sample`] low-level API to choose multiple indices from","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171312,"byte_end":171383,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/     `0..length`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171384,"byte_end":171403,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171404,"byte_end":171407,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Also see:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171408,"byte_end":171421,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171422,"byte_end":171425,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ *   [`crate::distributions::WeightedIndex`] distribution which provides","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171426,"byte_end":171501,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/     weighted index sampling.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171502,"byte_end":171534,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171535,"byte_end":171538,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171539,"byte_end":171616,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171617,"byte_end":171692,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ small performance boost in some cases).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":171693,"byte_end":171736,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":398},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172686,"byte_end":172697,"line_start":59,"line_end":59,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172104,"byte_end":172182,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172183,"byte_end":172186,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172187,"byte_end":172260,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172261,"byte_end":172336,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172337,"byte_end":172340,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172341,"byte_end":172348,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172349,"byte_end":172380,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172381,"byte_end":172384,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172385,"byte_end":172422,"line_start":49,"line_end":49,"column_start":1,"column_end":38}},{"value":"/ let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172423,"byte_end":172485,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ bytes.shuffle(&mut rng);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172486,"byte_end":172514,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/ let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172515,"byte_end":172563,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ println!(\"{}\", str);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172564,"byte_end":172588,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172589,"byte_end":172596,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172597,"byte_end":172636,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172637,"byte_end":172648,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172649,"byte_end":172667,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172668,"byte_end":172675,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":399},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172735,"byte_end":172739,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172704,"byte_end":172725,"line_start":60,"line_end":60,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173225,"byte_end":173231,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"pub fn choose<R: ?Sized>(&Self, &mut R) -> Option<&Self::Item> where R: Rng","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172746,"byte_end":172822,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172827,"byte_end":172846,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172851,"byte_end":172854,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172859,"byte_end":172896,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172901,"byte_end":172904,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172909,"byte_end":172922,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172927,"byte_end":172930,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172935,"byte_end":172942,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172947,"byte_end":172972,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":172977,"byte_end":173008,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173013,"byte_end":173016,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173021,"byte_end":173060,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173065,"byte_end":173096,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173101,"byte_end":173148,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173153,"byte_end":173205,"line_start":77,"line_end":77,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173210,"byte_end":173217,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173476,"byte_end":173486,"line_start":86,"line_end":86,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"pub fn choose_mut<R: ?Sized>(&mut Self, &mut R) -> Option<&mut Self::Item>\nwhere R: Rng","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173310,"byte_end":173380,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173385,"byte_end":173418,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173423,"byte_end":173426,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":173431,"byte_end":173468,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179809,"byte_end":179816,"line_start":244,"line_end":244,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"pub fn shuffle<R: ?Sized>(&mut Self, &mut R) where R: Rng","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179384,"byte_end":179421,"line_start":228,"line_end":228,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179426,"byte_end":179429,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179434,"byte_end":179485,"line_start":230,"line_end":230,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179490,"byte_end":179493,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179498,"byte_end":179511,"line_start":232,"line_end":232,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179516,"byte_end":179519,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179524,"byte_end":179531,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179536,"byte_end":179567,"line_start":235,"line_end":235,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179572,"byte_end":179597,"line_start":236,"line_end":236,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179602,"byte_end":179605,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179610,"byte_end":179641,"line_start":238,"line_end":238,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179646,"byte_end":179678,"line_start":239,"line_end":239,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179683,"byte_end":179719,"line_start":240,"line_end":240,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179724,"byte_end":179748,"line_start":241,"line_end":241,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179753,"byte_end":179789,"line_start":242,"line_end":242,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179794,"byte_end":179801,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180681,"byte_end":180696,"line_start":264,"line_end":264,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"pub fn partial_shuffle<R: ?Sized>(&mut Self, &mut R, usize)\n-> (&mut [Self::Item], &mut [Self::Item]) where R: Rng","parent":{"krate":0,"index":398},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179876,"byte_end":179921,"line_start":247,"line_end":247,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179926,"byte_end":179929,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":179934,"byte_end":180006,"line_start":249,"line_end":249,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180011,"byte_end":180080,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180085,"byte_end":180126,"line_start":251,"line_end":251,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180131,"byte_end":180134,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180139,"byte_end":180213,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180218,"byte_end":180267,"line_start":254,"line_end":254,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180272,"byte_end":180275,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180280,"byte_end":180356,"line_start":256,"line_end":256,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180361,"byte_end":180407,"line_start":257,"line_end":257,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180412,"byte_end":180481,"line_start":258,"line_end":258,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180486,"byte_end":180489,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180494,"byte_end":180567,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180572,"byte_end":180604,"line_start":261,"line_end":261,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180609,"byte_end":180612,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180617,"byte_end":180673,"line_start":263,"line_end":263,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":408},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181366,"byte_end":181380,"line_start":288,"line_end":288,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":414}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180826,"byte_end":180894,"line_start":270,"line_end":270,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180895,"byte_end":180898,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all iterators `I` where `I: Iterator + Sized`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180899,"byte_end":180977,"line_start":272,"line_end":272,"column_start":1,"column_end":79}},{"value":"/ and provides methods for","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":180978,"byte_end":181006,"line_start":273,"line_end":273,"column_start":1,"column_end":29}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181007,"byte_end":181068,"line_start":274,"line_end":274,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181069,"byte_end":181072,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181073,"byte_end":181080,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181081,"byte_end":181115,"line_start":277,"line_end":277,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181116,"byte_end":181119,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181120,"byte_end":181157,"line_start":279,"line_end":279,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181158,"byte_end":181161,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181162,"byte_end":181205,"line_start":281,"line_end":281,"column_start":1,"column_end":26}},{"value":"/ println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181206,"byte_end":181272,"line_start":282,"line_end":282,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181273,"byte_end":181280,"line_start":283,"line_end":283,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181281,"byte_end":181320,"line_start":284,"line_end":284,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181321,"byte_end":181332,"line_start":285,"line_end":285,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181333,"byte_end":181347,"line_start":286,"line_end":286,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181348,"byte_end":181355,"line_start":287,"line_end":287,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":182292,"byte_end":182298,"line_start":304,"line_end":304,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"pub fn choose<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where R: Rng","parent":{"krate":0,"index":408},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181405,"byte_end":181456,"line_start":289,"line_end":289,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181461,"byte_end":181464,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181469,"byte_end":181525,"line_start":291,"line_end":291,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181530,"byte_end":181533,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181538,"byte_end":181608,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181613,"byte_end":181687,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181692,"byte_end":181759,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181764,"byte_end":181833,"line_start":296,"line_end":296,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181838,"byte_end":181901,"line_start":297,"line_end":297,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181906,"byte_end":181909,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Note that the output values and the number of RNG samples used","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181914,"byte_end":181980,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ depends on size hints. In particular, `Iterator` combinators that don't","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181985,"byte_end":182060,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ change the values yielded but change the size hints may result in","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":182065,"byte_end":182134,"line_start":301,"line_end":301,"column_start":5,"column_end":74}},{"value":"/ `choose` returning different elements. If you want consistent results","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":182139,"byte_end":182212,"line_start":302,"line_end":302,"column_start":5,"column_end":78}},{"value":"/ and RNG usage consider using [`IteratorRandom::choose_stable`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":182217,"byte_end":182284,"line_start":303,"line_end":303,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184927,"byte_end":184940,"line_start":373,"line_end":373,"column_start":8,"column_end":21},"name":"choose_stable","qualname":"::seq::IteratorRandom::choose_stable","value":"pub fn choose_stable<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where\nR: Rng","parent":{"krate":0,"index":408},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":183894,"byte_end":183945,"line_start":355,"line_end":355,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":183950,"byte_end":183953,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":183958,"byte_end":184014,"line_start":357,"line_end":357,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184019,"byte_end":184022,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ This method is very similar to [`choose`] except that the result","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184027,"byte_end":184095,"line_start":359,"line_end":359,"column_start":5,"column_end":73}},{"value":"/ only depends on the length of the iterator and the values produced by","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184100,"byte_end":184173,"line_start":360,"line_end":360,"column_start":5,"column_end":78}},{"value":"/ `rng`. Notably for any iterator of a given length this will make the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184178,"byte_end":184250,"line_start":361,"line_end":361,"column_start":5,"column_end":77}},{"value":"/ same requests to `rng` and if the same sequence of values are produced","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184255,"byte_end":184329,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ the same index will be selected from `self`. This may be useful if you","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184334,"byte_end":184408,"line_start":363,"line_end":363,"column_start":5,"column_end":79}},{"value":"/ need consistent results no matter what type of iterator you are working","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184413,"byte_end":184488,"line_start":364,"line_end":364,"column_start":5,"column_end":80}},{"value":"/ with. If you do not need this stability prefer [`choose`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184493,"byte_end":184555,"line_start":365,"line_end":365,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184560,"byte_end":184563,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Note that this method still uses [`Iterator::size_hint`] to skip","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184568,"byte_end":184636,"line_start":367,"line_end":367,"column_start":5,"column_end":73}},{"value":"/ constructing elements where possible, however the selection and `rng`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184641,"byte_end":184714,"line_start":368,"line_end":368,"column_start":5,"column_end":78}},{"value":"/ calls are the same in the face of this optimization. If you want to","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184719,"byte_end":184790,"line_start":369,"line_end":369,"column_start":5,"column_end":76}},{"value":"/ force every element to be created regardless call `.inspect(|e| ())`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184795,"byte_end":184868,"line_start":370,"line_end":370,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184873,"byte_end":184876,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [`choose`]: IteratorRandom::choose","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":184881,"byte_end":184919,"line_start":372,"line_end":372,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186889,"byte_end":186909,"line_start":426,"line_end":426,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"pub fn choose_multiple_fill<R: ?Sized>(Self, &mut R, &mut [Self::Item])\n-> usize where R: Rng","parent":{"krate":0,"index":408},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186202,"byte_end":186272,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186277,"byte_end":186309,"line_start":414,"line_end":414,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186314,"byte_end":186317,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186322,"byte_end":186395,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186400,"byte_end":186472,"line_start":417,"line_end":417,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186477,"byte_end":186509,"line_start":418,"line_end":418,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186514,"byte_end":186517,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186522,"byte_end":186600,"line_start":420,"line_end":420,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186605,"byte_end":186683,"line_start":421,"line_end":421,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186688,"byte_end":186742,"line_start":422,"line_end":422,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186747,"byte_end":186750,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186755,"byte_end":186820,"line_start":424,"line_end":424,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":186825,"byte_end":186881,"line_start":425,"line_end":425,"column_start":5,"column_end":61}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23024,"byte_end":23038,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23333,"byte_end":23342,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":25223,"byte_end":25232,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34680,"byte_end":34687,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35453,"byte_end":35460,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39361,"byte_end":39368,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39525,"byte_end":39532,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40106,"byte_end":40114,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40845,"byte_end":40850,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41150,"byte_end":41164,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":56254,"byte_end":56265,"line_start":747,"line_end":747,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":67272,"byte_end":67280,"line_start":1025,"line_end":1025,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":67346,"byte_end":67361,"line_start":1029,"line_end":1029,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103002,"byte_end":103010,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103151,"byte_end":103159,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103302,"byte_end":103310,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103446,"byte_end":103454,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103629,"byte_end":103637,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103932,"byte_end":103940,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":113328,"byte_end":113336,"line_start":64,"line_end":64,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":114083,"byte_end":114095,"line_start":85,"line_end":85,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":114864,"byte_end":114872,"line_start":104,"line_end":104,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":116053,"byte_end":116061,"line_start":139,"line_end":139,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":117355,"byte_end":117363,"line_start":181,"line_end":181,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":117707,"byte_end":117715,"line_start":195,"line_end":195,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15187,"byte_end":15195,"line_start":218,"line_end":218,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15763,"byte_end":15771,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145809,"byte_end":145810,"line_start":303,"line_end":303,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161374,"byte_end":161381,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161677,"byte_end":161684,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163685,"byte_end":163703,"line_start":28,"line_end":28,"column_start":22,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":164807,"byte_end":164825,"line_start":61,"line_end":61,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":170024,"byte_end":170032,"line_start":83,"line_end":83,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":170488,"byte_end":170496,"line_start":105,"line_end":105,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":193110,"byte_end":193111,"line_start":615,"line_end":615,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2928,"byte_end":2941,"line_start":98,"line_end":98,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":11462,"byte_end":11469,"line_start":108,"line_end":108,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":41}},{"kind":"Mod","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2951,"byte_end":2958,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":288}},{"kind":"Mod","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2977,"byte_end":2981,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":344}},{"kind":"Mod","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mod.rs","byte_start":159501,"byte_end":159505,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":345}},{"kind":"Mod","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/lib.rs","byte_start":2991,"byte_end":2994,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":396}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23024,"byte_end":23038,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":441},"to":{"krate":1,"index":6958}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":23333,"byte_end":23342,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":434},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/bernoulli.rs","byte_start":25223,"byte_end":25232,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":434},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":34680,"byte_end":34687,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35453,"byte_end":35460,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":455},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":35876,"byte_end":35881,"line_start":212,"line_end":212,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":69}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":36456,"byte_end":36461,"line_start":227,"line_end":227,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39361,"byte_end":39368,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":455},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":39525,"byte_end":39532,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":455},"to":{"krate":1,"index":1997}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40106,"byte_end":40114,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":99},"to":{"krate":0,"index":95}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":40845,"byte_end":40850,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"kind":{"Impl":{"id":8}},"from":{"krate":1,"index":33366},"to":{"krate":0,"index":105}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":41150,"byte_end":41164,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"kind":{"Impl":{"id":9}},"from":{"krate":1,"index":33435},"to":{"krate":0,"index":105}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":56254,"byte_end":56265,"line_start":747,"line_end":747,"column_start":25,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":720},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":67272,"byte_end":67280,"line_start":1025,"line_end":1025,"column_start":24,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":37171},"to":{"krate":0,"index":69}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/uniform.rs","byte_start":67346,"byte_end":67361,"line_start":1029,"line_end":1029,"column_start":25,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":771},"to":{"krate":0,"index":71}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103002,"byte_end":103010,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103151,"byte_end":103159,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103302,"byte_end":103310,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103446,"byte_end":103454,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103629,"byte_end":103637,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/integer.rs","byte_start":103932,"byte_end":103940,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":113328,"byte_end":113336,"line_start":64,"line_end":64,"column_start":29,"column_end":37},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":114083,"byte_end":114095,"line_start":85,"line_end":85,"column_start":27,"column_end":39},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":870},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":114864,"byte_end":114872,"line_start":104,"line_end":104,"column_start":29,"column_end":37},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":116053,"byte_end":116061,"line_start":139,"line_end":139,"column_start":27,"column_end":35},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":117355,"byte_end":117363,"line_start":181,"line_end":181,"column_start":37,"column_end":45},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/other.rs","byte_start":117707,"byte_end":117715,"line_start":195,"line_end":195,"column_start":39,"column_end":47},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1249},"to":{"krate":0,"index":265}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":129235,"byte_end":129240,"line_start":238,"line_end":238,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":247}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":129446,"byte_end":129451,"line_start":245,"line_end":245,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":251}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/utils.rs","byte_start":129896,"byte_end":129901,"line_start":266,"line_end":266,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":256}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15187,"byte_end":15195,"line_start":218,"line_end":218,"column_start":28,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1237},"to":{"krate":1,"index":5625}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/distributions/mod.rs","byte_start":15763,"byte_end":15771,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1237},"to":{"krate":1,"index":5891}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":138095,"byte_end":138102,"line_start":55,"line_end":55,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":4,"index":124},"to":{"krate":0,"index":314}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rng.rs","byte_start":145809,"byte_end":145810,"line_start":303,"line_end":303,"column_start":35,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":334},"to":{"krate":0,"index":314}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161374,"byte_end":161381,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/mock.rs","byte_start":161677,"byte_end":161684,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1534},"to":{"krate":4,"index":124}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":163685,"byte_end":163703,"line_start":28,"line_end":28,"column_start":22,"column_end":40},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1548},"to":{"krate":4,"index":130}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/xoshiro256plusplus.rs","byte_start":164807,"byte_end":164825,"line_start":61,"line_end":61,"column_start":18,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1548},"to":{"krate":4,"index":124}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":170024,"byte_end":170032,"line_start":83,"line_end":83,"column_start":18,"column_end":26},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1563},"to":{"krate":4,"index":124}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/rngs/small.rs","byte_start":170488,"byte_end":170496,"line_start":105,"line_end":105,"column_start":22,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1563},"to":{"krate":4,"index":130}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181382,"byte_end":181390,"line_start":288,"line_end":288,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":5625},"to":{"krate":0,"index":408}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":181393,"byte_end":181398,"line_start":288,"line_end":288,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":408}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.8.3/src/seq/mod.rs","byte_start":193110,"byte_end":193111,"line_start":615,"line_end":615,"column_start":28,"column_end":29},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":428},"to":{"krate":0,"index":408}}]}