{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3","program":"/home/fredrik/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","quickcheck","--edition=2018","/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"env_logger\"","--cfg","feature=\"log\"","--cfg","feature=\"regex\"","--cfg","feature=\"use_logging\"","-C","metadata=eb611c58d99ce2a5","-C","extra-filename=-eb611c58d99ce2a5","--out-dir","/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps","-L","dependency=/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps","--extern","env_logger=/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps/libenv_logger-fa878d13b119d38c.rmeta","--extern","log=/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps/liblog-2365e26d4f630e64.rmeta","--extern","rand=/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps/librand-0f5228598e750e99.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/fredrik/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/fredrik/sourcecode/II142X_exjobb_project/reimplementation/unsafe_slist/singly_linked_list_unsafe/target/rls/debug/deps/libquickcheck-eb611c58d99ce2a5.rmeta"},"prelude":{"crate_id":{"name":"quickcheck","disambiguator":[9915602115641729968,14619962475461454297]},"crate_root":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src","external_crates":[{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8363989277313806732,13723635736355452392]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5755871685339259462,14524450630327408145]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6095990061662150844,17257511342173735843]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13534664360101634333,15955848543282431589]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2576337310504802494,7533979301291365915]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5114841071718684731,1147767992231475921]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14891534813972024149,13771932312545804845]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[904103305253144465,12292134317329413205]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[16314738562439622889,10306027504818249940]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15843431334828571128,5286674190927770495]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17405625562201081622,10275716470817790619]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11445955052790897216,5818918092474945162]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[14649202847011715524,6782578055671422766]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[7180995537586922820,7051902941398327739]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[9612987991627917998,10712864082221106628]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[17826240478786457486,5527832178130695808]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6600453779972510942,5977101663316138555]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","num":18,"id":{"name":"rand","disambiguator":[8121768166687423707,4521472353115800080]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","num":19,"id":{"name":"rand_core","disambiguator":[5058064500787580988,17223958804819295434]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","num":20,"id":{"name":"getrandom","disambiguator":[10629857054396772369,10365506566331352989]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","num":21,"id":{"name":"cfg_if","disambiguator":[1155024563974712189,5296233732488635092]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","num":22,"id":{"name":"libc","disambiguator":[7163127628430238526,6542326921292212871]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":23,"id":{"name":"log","disambiguator":[16637856329360640333,18342046342193457292]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":24,"id":{"name":"env_logger","disambiguator":[12262738094347842256,14370360315969138690]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":25,"id":{"name":"regex","disambiguator":[4142335971742035309,14235278641512009797]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":26,"id":{"name":"aho_corasick","disambiguator":[11387801938720203692,1439557197865244869]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":27,"id":{"name":"memchr","disambiguator":[13808587907274931623,1320653678005444489]}},{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","num":28,"id":{"name":"regex_syntax","disambiguator":[2986000638691094501,11936699216175845714]}}],"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":0,"byte_end":2559,"line_start":1,"line_end":93,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":84},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":575,"byte_end":589,"line_start":17,"line_end":17,"column_start":28,"column_end":42},"alias_span":null,"name":"empty_shrinker","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":591,"byte_end":606,"line_start":17,"line_end":17,"column_start":44,"column_end":59},"alias_span":null,"name":"single_shrinker","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":608,"byte_end":617,"line_start":17,"line_end":17,"column_start":61,"column_end":70},"alias_span":null,"name":"Arbitrary","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":70},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":619,"byte_end":622,"line_start":17,"line_end":17,"column_start":72,"column_end":75},"alias_span":null,"name":"Gen","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":294},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":649,"byte_end":659,"line_start":18,"line_end":18,"column_start":25,"column_end":35},"alias_span":null,"name":"quickcheck","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":275},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":661,"byte_end":671,"line_start":18,"line_end":18,"column_start":37,"column_end":47},"alias_span":null,"name":"QuickCheck","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":673},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":673,"byte_end":683,"line_start":18,"line_end":18,"column_start":49,"column_end":59},"alias_span":null,"name":"TestResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":309},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":685,"byte_end":693,"line_start":18,"line_end":18,"column_start":61,"column_end":69},"alias_span":null,"name":"Testable","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":0,"byte_end":2559,"line_start":1,"line_end":93,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":263}],"decl_id":null,"docs":"This crate is a port of\n[Haskell's QuickCheck](https://hackage.haskell.org/package/QuickCheck).","sig":null,"attributes":[{"value":"*\nThis crate is a port of\n[Haskell's QuickCheck](https://hackage.haskell.org/package/QuickCheck).\n\nFor detailed examples, please see the\n[README](https://github.com/BurntSushi/quickcheck).\n\n# Compatibility\n\nIn general, this crate considers the `Arbitrary` implementations provided as\nimplementation details. Strategies may or may not change over time, which may\ncause new test failures, presumably due to the discovery of new bugs due to a\nnew kind of witness being generated. These sorts of changes may happen in\nsemver compatible releases.\n*/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/lib.rs","byte_start":0,"byte_end":546,"line_start":1,"line_end":15,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":70},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3674,"byte_end":3677,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Gen","qualname":"::arbitrary::Gen","value":"Gen {  }","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72}],"decl_id":null,"docs":" Gen represents a PRNG.","sig":null,"attributes":[{"value":"/ Gen represents a PRNG.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3273,"byte_end":3299,"line_start":27,"line_end":27,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3300,"byte_end":3303,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ It is the source of randomness from which QuickCheck will generate","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3304,"byte_end":3374,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/ values. An instance of `Gen` is passed to every invocation of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3375,"byte_end":3440,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/ `Arbitrary::arbitrary`, which permits callers to use lower level RNG","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3441,"byte_end":3513,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"/ routines to generate values.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3514,"byte_end":3546,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3547,"byte_end":3550,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ It is unspecified whether this is a secure RNG or not. Therefore, callers","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3551,"byte_end":3628,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ should assume it is insecure.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3629,"byte_end":3662,"line_start":35,"line_end":35,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":4157,"byte_end":4160,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<Gen>::new","value":"pub fn new(usize) -> Gen","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Gen` with the given size configuration.","sig":null,"attributes":[{"value":"/ Returns a `Gen` with the given size configuration.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3746,"byte_end":3800,"line_start":42,"line_end":42,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3805,"byte_end":3808,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ The `size` parameter controls the size of random values generated.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3813,"byte_end":3883,"line_start":44,"line_end":44,"column_start":5,"column_end":75}},{"value":"/ For example, it specifies the maximum length of a randomly generated","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3888,"byte_end":3960,"line_start":45,"line_end":45,"column_start":5,"column_end":77}},{"value":"/ vector, but is and should not be used to control the range of a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3965,"byte_end":4032,"line_start":46,"line_end":46,"column_start":5,"column_end":72}},{"value":"/ randomly generated number. (Unless that number is used to control the","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":4037,"byte_end":4110,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/ size of a data structure.)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":4115,"byte_end":4145,"line_start":48,"line_end":48,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":4328,"byte_end":4332,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"size","qualname":"<Gen>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size configured with this generator.\n","sig":null,"attributes":[{"value":"/ Returns the size configured with this generator.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":4264,"byte_end":4316,"line_start":53,"line_end":53,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":4578,"byte_end":4584,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"choose","qualname":"<Gen>::choose","value":"pub fn choose<'a, T>(&mut Self, &'a [T]) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":" Choose among the possible alternatives in the slice given. If the slice\n is empty, then `None` is returned. Otherwise, a non-`None` value is\n guaranteed to be returned.\n","sig":null,"attributes":[{"value":"/ Choose among the possible alternatives in the slice given. If the slice","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":4380,"byte_end":4455,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"/ is empty, then `None` is returned. Otherwise, a non-`None` value is","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":4460,"byte_end":4531,"line_start":59,"line_end":59,"column_start":5,"column_end":76}},{"value":"/ guaranteed to be returned.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":4536,"byte_end":4566,"line_start":60,"line_end":60,"column_start":5,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5105,"byte_end":5119,"line_start":82,"line_end":82,"column_start":8,"column_end":22},"name":"empty_shrinker","qualname":"::arbitrary::empty_shrinker","value":"pub fn empty_shrinker<A: 'static>() -> Box<Iterator<Item = A>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a shrinker with zero elements.\n","sig":null,"attributes":[{"value":"/ Creates a shrinker with zero elements.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5055,"byte_end":5097,"line_start":81,"line_end":81,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5245,"byte_end":5260,"line_start":87,"line_end":87,"column_start":8,"column_end":23},"name":"single_shrinker","qualname":"::arbitrary::single_shrinker","value":"pub fn single_shrinker<A: 'static>(A) -> Box<Iterator<Item = A>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a shrinker with a single element.\n","sig":null,"attributes":[{"value":"/ Creates a shrinker with a single element.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5192,"byte_end":5237,"line_start":86,"line_end":86,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":88},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6105,"byte_end":6114,"line_start":105,"line_end":105,"column_start":11,"column_end":20},"name":"Arbitrary","qualname":"::arbitrary::Arbitrary","value":"Arbitrary: Clone + 'static","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90}],"decl_id":null,"docs":" `Arbitrary` describes types whose values can be randomly generated and\n shrunk.","sig":null,"attributes":[{"value":"/ `Arbitrary` describes types whose values can be randomly generated and","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5345,"byte_end":5419,"line_start":91,"line_end":91,"column_start":1,"column_end":75}},{"value":"/ shrunk.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5420,"byte_end":5431,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5432,"byte_end":5435,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ Aside from shrinking, `Arbitrary` is different from typical RNGs in that","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5436,"byte_end":5512,"line_start":94,"line_end":94,"column_start":1,"column_end":77}},{"value":"/ it respects `Gen::size()` for controlling how much memory a particular","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5513,"byte_end":5587,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/ value uses, for practical purposes. For example, `Vec::arbitrary()`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5588,"byte_end":5659,"line_start":96,"line_end":96,"column_start":1,"column_end":72}},{"value":"/ respects `Gen::size()` to decide the maximum `len()` of the vector.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5660,"byte_end":5731,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/ This behavior is necessary due to practical speed and size limitations.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5732,"byte_end":5807,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/ Conversely, `i32::arbitrary()` ignores `size()` since all `i32` values","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5808,"byte_end":5882,"line_start":99,"line_end":99,"column_start":1,"column_end":75}},{"value":"/ require `O(1)` memory and operations between `i32`s require `O(1)` time","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5883,"byte_end":5958,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/ (with the exception of exponentiation).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":5959,"byte_end":6002,"line_start":101,"line_end":101,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6003,"byte_end":6006,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Additionally, all types that implement `Arbitrary` must also implement","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6007,"byte_end":6081,"line_start":103,"line_end":103,"column_start":1,"column_end":75}},{"value":"/ `Clone`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6082,"byte_end":6094,"line_start":104,"line_end":104,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6506,"byte_end":6515,"line_start":113,"line_end":113,"column_start":8,"column_end":17},"name":"arbitrary","qualname":"::arbitrary::Arbitrary::arbitrary","value":"pub fn arbitrary(&mut Gen) -> Self","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Return an arbitrary value.","sig":null,"attributes":[{"value":"/ Return an arbitrary value.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6138,"byte_end":6168,"line_start":106,"line_end":106,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6173,"byte_end":6176,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Implementations should respect `Gen::size()` when decisions about how","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6181,"byte_end":6254,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ big a particular value should be. Implementations should generally","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6259,"byte_end":6329,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"/ defer to other `Arbitrary` implementations to generate other random","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6334,"byte_end":6405,"line_start":110,"line_end":110,"column_start":5,"column_end":76}},{"value":"/ values when necessary. The `Gen` type also offers a few RNG helper","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6410,"byte_end":6480,"line_start":111,"line_end":111,"column_start":5,"column_end":75}},{"value":"/ routines.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6485,"byte_end":6498,"line_start":112,"line_end":112,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":7266,"byte_end":7272,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"shrink","qualname":"::arbitrary::Arbitrary::shrink","value":"pub fn shrink(&Self) -> Box<Iterator<Item = Self>>","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Return an iterator of values that are smaller than itself.","sig":null,"attributes":[{"value":"/ Return an iterator of values that are smaller than itself.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6543,"byte_end":6605,"line_start":115,"line_end":115,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6610,"byte_end":6613,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The way in which a value is \"smaller\" is implementation defined. In","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6618,"byte_end":6689,"line_start":117,"line_end":117,"column_start":5,"column_end":76}},{"value":"/ some cases, the interpretation is obvious: shrinking an integer should","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6694,"byte_end":6768,"line_start":118,"line_end":118,"column_start":5,"column_end":79}},{"value":"/ produce integers smaller than itself. Others are more complex, for","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6773,"byte_end":6843,"line_start":119,"line_end":119,"column_start":5,"column_end":75}},{"value":"/ example, shrinking a `Vec` should both shrink its size and shrink its","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6848,"byte_end":6921,"line_start":120,"line_end":120,"column_start":5,"column_end":78}},{"value":"/ component values.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6926,"byte_end":6947,"line_start":121,"line_end":121,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6952,"byte_end":6955,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ The iterator returned should be bounded to some reasonable size.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6960,"byte_end":7028,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":7033,"byte_end":7036,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ It is always correct to return an empty iterator, and indeed, this","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":7041,"byte_end":7111,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"/ is the default implementation. The downside of this approach is that","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":7116,"byte_end":7188,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ witnesses to failures in properties will be more inscrutable.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":7193,"byte_end":7258,"line_start":127,"line_end":127,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":275},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":50238,"byte_end":50248,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"QuickCheck","qualname":"::tester::QuickCheck","value":"QuickCheck {  }","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279}],"decl_id":null,"docs":" The main QuickCheck type for setting configuration and running QuickCheck.\n","sig":null,"attributes":[{"value":"/ The main QuickCheck type for setting configuration and running QuickCheck.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":50148,"byte_end":50226,"line_start":11,"line_end":11,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51517,"byte_end":51520,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<QuickCheck>::new","value":"pub fn new() -> QuickCheck","parent":null,"children":[],"decl_id":null,"docs":" Creates a new QuickCheck value.","sig":null,"attributes":[{"value":"/ Creates a new QuickCheck value.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51094,"byte_end":51129,"line_start":52,"line_end":52,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51134,"byte_end":51137,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ This can be used to run QuickCheck on things that implement `Testable`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51142,"byte_end":51217,"line_start":54,"line_end":54,"column_start":5,"column_end":80}},{"value":"/ You may also adjust the configuration, such as the number of tests to","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51222,"byte_end":51295,"line_start":55,"line_end":55,"column_start":5,"column_end":78}},{"value":"/ run.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51300,"byte_end":51308,"line_start":56,"line_end":56,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51313,"byte_end":51316,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ By default, the maximum number of passed tests is set to `100`, the max","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51321,"byte_end":51396,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"/ number of overall tests is set to `10000` and the generator is created","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51401,"byte_end":51475,"line_start":59,"line_end":59,"column_start":5,"column_end":79}},{"value":"/ with a size of `100`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51480,"byte_end":51505,"line_start":60,"line_end":60,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51873,"byte_end":51876,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"gen","qualname":"<QuickCheck>::gen","value":"pub fn gen(Self, Gen) -> QuickCheck","parent":null,"children":[],"decl_id":null,"docs":" Set the random number generator to be used by QuickCheck.\n","sig":null,"attributes":[{"value":"/ Set the random number generator to be used by QuickCheck.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51800,"byte_end":51861,"line_start":70,"line_end":70,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52272,"byte_end":52277,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"tests","qualname":"<QuickCheck>::tests","value":"pub fn tests(Self, u64) -> QuickCheck","parent":null,"children":[],"decl_id":null,"docs":" Set the number of tests to run.","sig":null,"attributes":[{"value":"/ Set the number of tests to run.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51955,"byte_end":51990,"line_start":75,"line_end":75,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51995,"byte_end":51998,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ This actually refers to the maximum number of *passed* tests that","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52003,"byte_end":52072,"line_start":77,"line_end":77,"column_start":5,"column_end":74}},{"value":"/ can occur. Namely, if a test causes a failure, future testing on that","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52077,"byte_end":52150,"line_start":78,"line_end":78,"column_start":5,"column_end":78}},{"value":"/ property stops. Additionally, if tests are discarded, there may be","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52155,"byte_end":52225,"line_start":79,"line_end":79,"column_start":5,"column_end":75}},{"value":"/ fewer than `tests` passed.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52230,"byte_end":52260,"line_start":80,"line_end":80,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52620,"byte_end":52629,"line_start":91,"line_end":91,"column_start":12,"column_end":21},"name":"max_tests","qualname":"<QuickCheck>::max_tests","value":"pub fn max_tests(Self, u64) -> QuickCheck","parent":null,"children":[],"decl_id":null,"docs":" Set the maximum number of tests to run.","sig":null,"attributes":[{"value":"/ Set the maximum number of tests to run.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52368,"byte_end":52411,"line_start":86,"line_end":86,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52416,"byte_end":52419,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ The number of invocations of a property will never exceed this number.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52424,"byte_end":52498,"line_start":88,"line_end":88,"column_start":5,"column_end":79}},{"value":"/ This is necessary to cap the number of tests because QuickCheck","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52503,"byte_end":52570,"line_start":89,"line_end":89,"column_start":5,"column_end":72}},{"value":"/ properties can discard tests.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52575,"byte_end":52608,"line_start":90,"line_end":90,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52957,"byte_end":52973,"line_start":100,"line_end":100,"column_start":12,"column_end":28},"name":"min_tests_passed","qualname":"<QuickCheck>::min_tests_passed","value":"pub fn min_tests_passed(Self, u64) -> QuickCheck","parent":null,"children":[],"decl_id":null,"docs":" Set the minimum number of tests that needs to pass.","sig":null,"attributes":[{"value":"/ Set the minimum number of tests that needs to pass.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52732,"byte_end":52787,"line_start":96,"line_end":96,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52792,"byte_end":52795,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This actually refers to the minimum number of *valid* *passed* tests","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52800,"byte_end":52872,"line_start":98,"line_end":98,"column_start":5,"column_end":77}},{"value":"/ that needs to pass for the property to be considered successful.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":52877,"byte_end":52945,"line_start":99,"line_end":99,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":53418,"byte_end":53427,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"quicktest","qualname":"<QuickCheck>::quicktest","value":"pub fn quicktest<A>(&mut Self, A) -> Result<u64, TestResult> where A: Testable","parent":null,"children":[],"decl_id":null,"docs":" Tests a property and returns the result.","sig":null,"attributes":[{"value":"/ Tests a property and returns the result.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":53097,"byte_end":53141,"line_start":105,"line_end":105,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":53146,"byte_end":53149,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ The result returned is either the number of tests passed or a witness","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":53154,"byte_end":53227,"line_start":107,"line_end":107,"column_start":5,"column_end":78}},{"value":"/ of failure.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":53232,"byte_end":53247,"line_start":108,"line_end":108,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":53252,"byte_end":53255,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ (If you're using Rust's unit testing infrastructure, then you'll","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":53260,"byte_end":53328,"line_start":110,"line_end":110,"column_start":5,"column_end":73}},{"value":"/ want to use the `quickcheck` method, which will `panic!` on failure.)","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":53333,"byte_end":53406,"line_start":111,"line_end":111,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54932,"byte_end":54942,"line_start":156,"line_end":156,"column_start":12,"column_end":22},"name":"quickcheck","qualname":"<QuickCheck>::quickcheck","value":"pub fn quickcheck<A>(&mut Self, A) where A: Testable","parent":null,"children":[],"decl_id":null,"docs":" Tests a property and calls `panic!` on failure.","sig":null,"attributes":[{"value":"/ Tests a property and calls `panic!` on failure.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":53980,"byte_end":54031,"line_start":130,"line_end":130,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54036,"byte_end":54039,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ The `panic!` message will include a (hopefully) minimal witness of","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54044,"byte_end":54114,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/ failure.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54119,"byte_end":54131,"line_start":133,"line_end":133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54136,"byte_end":54139,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ It is appropriate to use this method with Rust's unit testing","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54144,"byte_end":54209,"line_start":135,"line_end":135,"column_start":5,"column_end":70}},{"value":"/ infrastructure.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54214,"byte_end":54233,"line_start":136,"line_end":136,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54238,"byte_end":54241,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Note that if the environment variable `RUST_LOG` is set to enable","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54246,"byte_end":54315,"line_start":138,"line_end":138,"column_start":5,"column_end":74}},{"value":"/ `info` level log messages for the `quickcheck` crate, then this will","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54320,"byte_end":54392,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/ include output on how many QuickCheck tests were passed.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54397,"byte_end":54457,"line_start":140,"line_end":140,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54462,"byte_end":54465,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54470,"byte_end":54483,"line_start":142,"line_end":142,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54488,"byte_end":54491,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54496,"byte_end":54507,"line_start":144,"line_end":144,"column_start":5,"column_end":16}},{"value":"/ use quickcheck::QuickCheck;","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54512,"byte_end":54543,"line_start":145,"line_end":145,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54548,"byte_end":54551,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ fn prop_reverse_reverse() {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54556,"byte_end":54587,"line_start":147,"line_end":147,"column_start":5,"column_end":36}},{"value":"/     fn revrev(xs: Vec<usize>) -> bool {","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54592,"byte_end":54635,"line_start":148,"line_end":148,"column_start":5,"column_end":48}},{"value":"/         let rev: Vec<_> = xs.clone().into_iter().rev().collect();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54640,"byte_end":54709,"line_start":149,"line_end":149,"column_start":5,"column_end":74}},{"value":"/         let revrev: Vec<_> = rev.into_iter().rev().collect();","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54714,"byte_end":54779,"line_start":150,"line_end":150,"column_start":5,"column_end":70}},{"value":"/         xs == revrev","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54784,"byte_end":54808,"line_start":151,"line_end":151,"column_start":5,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54813,"byte_end":54822,"line_start":152,"line_end":152,"column_start":5,"column_end":14}},{"value":"/     QuickCheck::new().quickcheck(revrev as fn(Vec<usize>) -> bool);","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54827,"byte_end":54898,"line_start":153,"line_end":153,"column_start":5,"column_end":76}},{"value":"/ }","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54903,"byte_end":54908,"line_start":154,"line_end":154,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":54913,"byte_end":54920,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":55701,"byte_end":55711,"line_start":182,"line_end":182,"column_start":8,"column_end":18},"name":"quickcheck","qualname":"::tester::quickcheck","value":"pub fn quickcheck<A: Testable>(A)","parent":null,"children":[],"decl_id":null,"docs":" Convenience function for running QuickCheck.","sig":null,"attributes":[{"value":"/ Convenience function for running QuickCheck.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":55581,"byte_end":55629,"line_start":179,"line_end":179,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":55630,"byte_end":55633,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ This is an alias for `QuickCheck::new().quickcheck(f)`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":55634,"byte_end":55693,"line_start":181,"line_end":181,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":673},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":55937,"byte_end":55947,"line_start":190,"line_end":190,"column_start":12,"column_end":22},"name":"TestResult","qualname":"::tester::TestResult","value":"TestResult {  }","parent":null,"children":[{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676}],"decl_id":null,"docs":" Describes the status of a single instance of a test.","sig":null,"attributes":[{"value":"/ Describes the status of a single instance of a test.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":55772,"byte_end":55828,"line_start":186,"line_end":186,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":55829,"byte_end":55832,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ All testable things must be capable of producing a `TestResult`.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":55833,"byte_end":55901,"line_start":188,"line_end":188,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56261,"byte_end":56267,"line_start":206,"line_end":206,"column_start":12,"column_end":18},"name":"passed","qualname":"<TestResult>::passed","value":"pub fn passed() -> TestResult","parent":null,"children":[],"decl_id":null,"docs":" Produces a test result that indicates the current test has passed.\n","sig":null,"attributes":[{"value":"/ Produces a test result that indicates the current test has passed.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56179,"byte_end":56249,"line_start":205,"line_end":205,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56415,"byte_end":56421,"line_start":211,"line_end":211,"column_start":12,"column_end":18},"name":"failed","qualname":"<TestResult>::failed","value":"pub fn failed() -> TestResult","parent":null,"children":[],"decl_id":null,"docs":" Produces a test result that indicates the current test has failed.\n","sig":null,"attributes":[{"value":"/ Produces a test result that indicates the current test has failed.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56333,"byte_end":56403,"line_start":210,"line_end":210,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56571,"byte_end":56576,"line_start":216,"line_end":216,"column_start":12,"column_end":17},"name":"error","qualname":"<TestResult>::error","value":"pub fn error<S: Into<String>>(S) -> TestResult","parent":null,"children":[],"decl_id":null,"docs":" Produces a test result that indicates failure from a runtime error.\n","sig":null,"attributes":[{"value":"/ Produces a test result that indicates failure from a runtime error.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56488,"byte_end":56559,"line_start":215,"line_end":215,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56986,"byte_end":56993,"line_start":226,"line_end":226,"column_start":12,"column_end":19},"name":"discard","qualname":"<TestResult>::discard","value":"pub fn discard() -> TestResult","parent":null,"children":[],"decl_id":null,"docs":" Produces a test result that instructs `quickcheck` to ignore it.\n This is useful for restricting the domain of your properties.\n When a test is discarded, `quickcheck` will replace it with a\n fresh one (up to a certain limit).\n","sig":null,"attributes":[{"value":"/ Produces a test result that instructs `quickcheck` to ignore it.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56723,"byte_end":56791,"line_start":222,"line_end":222,"column_start":5,"column_end":73}},{"value":"/ This is useful for restricting the domain of your properties.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56796,"byte_end":56861,"line_start":223,"line_end":223,"column_start":5,"column_end":70}},{"value":"/ When a test is discarded, `quickcheck` will replace it with a","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56866,"byte_end":56931,"line_start":224,"line_end":224,"column_start":5,"column_end":70}},{"value":"/ fresh one (up to a certain limit).","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56936,"byte_end":56974,"line_start":225,"line_end":225,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57266,"byte_end":57275,"line_start":233,"line_end":233,"column_start":12,"column_end":21},"name":"from_bool","qualname":"<TestResult>::from_bool","value":"pub fn from_bool(bool) -> TestResult","parent":null,"children":[],"decl_id":null,"docs":" Converts a `bool` to a `TestResult`. A `true` value indicates that\n the test has passed and a `false` value indicates that the test\n has failed.\n","sig":null,"attributes":[{"value":"/ Converts a `bool` to a `TestResult`. A `true` value indicates that","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57092,"byte_end":57162,"line_start":230,"line_end":230,"column_start":5,"column_end":75}},{"value":"/ the test has passed and a `false` value indicates that the test","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57167,"byte_end":57234,"line_start":231,"line_end":231,"column_start":5,"column_end":72}},{"value":"/ has failed.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57239,"byte_end":57254,"line_start":232,"line_end":232,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57588,"byte_end":57597,"line_start":243,"line_end":243,"column_start":12,"column_end":21},"name":"must_fail","qualname":"<TestResult>::must_fail","value":"pub fn must_fail<T, F>(F) -> TestResult where F: FnOnce() -> T, F: 'static,\nT: 'static","parent":null,"children":[],"decl_id":null,"docs":" Tests if a \"procedure\" fails when executed. The test passes only if\n `f` generates a task failure during its execution.\n","sig":null,"attributes":[{"value":"/ Tests if a \"procedure\" fails when executed. The test passes only if","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57446,"byte_end":57517,"line_start":241,"line_end":241,"column_start":5,"column_end":76}},{"value":"/ `f` generates a task failure during its execution.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57522,"byte_end":57576,"line_start":242,"line_end":242,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57920,"byte_end":57930,"line_start":255,"line_end":255,"column_start":12,"column_end":22},"name":"is_failure","qualname":"<TestResult>::is_failure","value":"pub fn is_failure(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if this test result describes a failing\n test.\n","sig":null,"attributes":[{"value":"/ Returns `true` if and only if this test result describes a failing","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57824,"byte_end":57894,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"/ test.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":57899,"byte_end":57908,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":58188,"byte_end":58196,"line_start":264,"line_end":264,"column_start":12,"column_end":20},"name":"is_error","qualname":"<TestResult>::is_error","value":"pub fn is_error(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if and only if this test result describes a failing\n test as a result of a run time error.\n","sig":null,"attributes":[{"value":"/ Returns `true` if and only if this test result describes a failing","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":58060,"byte_end":58130,"line_start":262,"line_end":262,"column_start":5,"column_end":75}},{"value":"/ test as a result of a run time error.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":58135,"byte_end":58176,"line_start":263,"line_end":263,"column_start":5,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":309},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59256,"byte_end":59264,"line_start":295,"line_end":295,"column_start":11,"column_end":19},"name":"Testable","qualname":"::tester::Testable","value":"Testable: 'static","parent":null,"children":[{"krate":0,"index":310}],"decl_id":null,"docs":" `Testable` describes types (e.g., a function) whose values can be\n tested.","sig":null,"attributes":[{"value":"/ `Testable` describes types (e.g., a function) whose values can be","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":58720,"byte_end":58789,"line_start":284,"line_end":284,"column_start":1,"column_end":70}},{"value":"/ tested.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":58790,"byte_end":58801,"line_start":285,"line_end":285,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":58802,"byte_end":58805,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ Anything that can be tested must be capable of producing a `TestResult`","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":58806,"byte_end":58881,"line_start":287,"line_end":287,"column_start":1,"column_end":76}},{"value":"/ given a random number generator. This is trivial for types like `bool`,","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":58882,"byte_end":58957,"line_start":288,"line_end":288,"column_start":1,"column_end":76}},{"value":"/ which are just converted to either a passing or failing test result.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":58958,"byte_end":59030,"line_start":289,"line_end":289,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59031,"byte_end":59034,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ For functions, an implementation must generate random arguments","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59035,"byte_end":59102,"line_start":291,"line_end":291,"column_start":1,"column_end":68}},{"value":"/ and potentially shrink those arguments if they produce a failure.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59103,"byte_end":59172,"line_start":292,"line_end":292,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59173,"byte_end":59176,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ It's unlikely that you'll have to implement this trait yourself.","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59177,"byte_end":59245,"line_start":294,"line_end":294,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59283,"byte_end":59289,"line_start":296,"line_end":296,"column_start":8,"column_end":14},"name":"result","qualname":"::tester::Testable::result","value":"pub fn result(&Self, &mut Gen) -> TestResult","parent":{"krate":0,"index":309},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3736,"byte_end":3739,"line_start":41,"line_end":41,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":7730,"byte_end":7736,"line_start":153,"line_end":153,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":8243,"byte_end":8249,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":10511,"byte_end":10514,"line_start":251,"line_end":251,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":11262,"byte_end":11273,"line_start":277,"line_end":277,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":12280,"byte_end":12291,"line_start":310,"line_end":310,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":14174,"byte_end":14182,"line_start":365,"line_end":365,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":14720,"byte_end":14727,"line_start":383,"line_end":383,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":15120,"byte_end":15128,"line_start":396,"line_end":396,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":15526,"byte_end":15536,"line_start":408,"line_end":408,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":16017,"byte_end":16024,"line_start":423,"line_end":423,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":16398,"byte_end":16408,"line_start":436,"line_end":436,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":16829,"byte_end":16837,"line_start":450,"line_end":450,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":17215,"byte_end":17221,"line_start":462,"line_end":462,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":17469,"byte_end":17477,"line_start":473,"line_end":473,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":17610,"byte_end":17618,"line_start":479,"line_end":479,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":17894,"byte_end":17904,"line_start":494,"line_end":494,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":18039,"byte_end":18051,"line_start":500,"line_end":500,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":18190,"byte_end":18202,"line_start":506,"line_end":506,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":18359,"byte_end":18366,"line_start":512,"line_end":512,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":20079,"byte_end":20087,"line_start":563,"line_end":563,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":20406,"byte_end":20412,"line_start":574,"line_end":574,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":20898,"byte_end":20905,"line_start":590,"line_end":590,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":33204,"byte_end":33212,"line_start":980,"line_end":980,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":33474,"byte_end":33479,"line_start":989,"line_end":989,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":34146,"byte_end":34151,"line_start":1010,"line_end":1010,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":34496,"byte_end":34510,"line_start":1021,"line_end":1021,"column_start":55,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":34913,"byte_end":34922,"line_start":1034,"line_end":1034,"column_start":55,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":35211,"byte_end":35218,"line_start":1043,"line_end":1043,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":35497,"byte_end":35513,"line_start":1052,"line_end":1052,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":35777,"byte_end":35786,"line_start":1061,"line_end":1061,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":35873,"byte_end":35881,"line_start":1067,"line_end":1067,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":36372,"byte_end":36375,"line_start":1083,"line_end":1083,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":253},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":36622,"byte_end":36625,"line_start":1093,"line_end":1093,"column_start":41,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":36851,"byte_end":36861,"line_start":1103,"line_end":1103,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51077,"byte_end":51087,"line_start":51,"line_end":51,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56162,"byte_end":56172,"line_start":204,"line_end":204,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59578,"byte_end":59588,"line_start":311,"line_end":311,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59695,"byte_end":59701,"line_start":317,"line_end":317,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":62726,"byte_end":62727,"line_start":417,"line_end":417,"column_start":38,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":3736,"byte_end":3739,"line_start":41,"line_end":41,"column_start":6,"column_end":9},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":70},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":6116,"byte_end":6121,"line_start":105,"line_end":105,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":1770},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":7730,"byte_end":7736,"line_start":153,"line_end":153,"column_start":34,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":2,"index":34651},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":8243,"byte_end":8249,"line_start":173,"line_end":173,"column_start":48,"column_end":54},"kind":{"Impl":{"id":3}},"from":{"krate":2,"index":34810},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":10511,"byte_end":10514,"line_start":251,"line_end":251,"column_start":34,"column_end":37},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":5357},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":11262,"byte_end":11273,"line_start":277,"line_end":277,"column_start":20,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":12280,"byte_end":12291,"line_start":310,"line_end":310,"column_start":22,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":112},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":14174,"byte_end":14182,"line_start":365,"line_end":365,"column_start":54,"column_end":62},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":933},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":14720,"byte_end":14727,"line_start":383,"line_end":383,"column_start":21,"column_end":28},"kind":{"Impl":{"id":8}},"from":{"krate":1,"index":617},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":15120,"byte_end":15128,"line_start":396,"line_end":396,"column_start":40,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":5,"index":5706},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":15526,"byte_end":15536,"line_start":408,"line_end":408,"column_start":40,"column_end":50},"kind":{"Impl":{"id":10}},"from":{"krate":5,"index":525},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":16017,"byte_end":16024,"line_start":423,"line_end":423,"column_start":19,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":1,"index":1281},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":16398,"byte_end":16408,"line_start":436,"line_end":436,"column_start":34,"column_end":44},"kind":{"Impl":{"id":12}},"from":{"krate":5,"index":2616},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":16829,"byte_end":16837,"line_start":450,"line_end":450,"column_start":34,"column_end":42},"kind":{"Impl":{"id":13}},"from":{"krate":5,"index":3204},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":17215,"byte_end":17221,"line_start":462,"line_end":462,"column_start":20,"column_end":26},"kind":{"Impl":{"id":14}},"from":{"krate":1,"index":7342},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":17469,"byte_end":17477,"line_start":473,"line_end":473,"column_start":20,"column_end":28},"kind":{"Impl":{"id":15}},"from":{"krate":1,"index":7370},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":17610,"byte_end":17618,"line_start":479,"line_end":479,"column_start":20,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":7373},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":17894,"byte_end":17904,"line_start":494,"line_end":494,"column_start":20,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":1,"index":7308},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":18039,"byte_end":18051,"line_start":500,"line_end":500,"column_start":20,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":1,"index":7336},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":18190,"byte_end":18202,"line_start":506,"line_end":506,"column_start":20,"column_end":32},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":7339},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":18359,"byte_end":18366,"line_start":512,"line_end":512,"column_start":20,"column_end":27},"kind":{"Impl":{"id":20}},"from":{"krate":1,"index":7727},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":20079,"byte_end":20087,"line_start":563,"line_end":563,"column_start":20,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":1,"index":7004},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":20406,"byte_end":20412,"line_start":574,"line_end":574,"column_start":20,"column_end":26},"kind":{"Impl":{"id":22}},"from":{"krate":5,"index":5852},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":20898,"byte_end":20905,"line_start":590,"line_end":590,"column_start":20,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":6904},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":33204,"byte_end":33212,"line_start":980,"line_end":980,"column_start":34,"column_end":42},"kind":{"Impl":{"id":45}},"from":{"krate":2,"index":16547},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":33474,"byte_end":33479,"line_start":989,"line_end":989,"column_start":34,"column_end":39},"kind":{"Impl":{"id":46}},"from":{"krate":2,"index":33481},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":34146,"byte_end":34151,"line_start":1010,"line_end":1010,"column_start":55,"column_end":60},"kind":{"Impl":{"id":47}},"from":{"krate":2,"index":33366},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":34496,"byte_end":34510,"line_start":1021,"line_end":1021,"column_start":55,"column_end":69},"kind":{"Impl":{"id":48}},"from":{"krate":2,"index":33435},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":34913,"byte_end":34922,"line_start":1034,"line_end":1034,"column_start":55,"column_end":64},"kind":{"Impl":{"id":49}},"from":{"krate":2,"index":33391},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":35211,"byte_end":35218,"line_start":1043,"line_end":1043,"column_start":55,"column_end":62},"kind":{"Impl":{"id":50}},"from":{"krate":2,"index":33412},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":35497,"byte_end":35513,"line_start":1052,"line_end":1052,"column_start":55,"column_end":71},"kind":{"Impl":{"id":51}},"from":{"krate":2,"index":33458},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":35777,"byte_end":35786,"line_start":1061,"line_end":1061,"column_start":20,"column_end":29},"kind":{"Impl":{"id":52}},"from":{"krate":2,"index":33350},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":35873,"byte_end":35881,"line_start":1067,"line_end":1067,"column_start":20,"column_end":28},"kind":{"Impl":{"id":53}},"from":{"krate":2,"index":37171},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":36372,"byte_end":36375,"line_start":1083,"line_end":1083,"column_start":34,"column_end":37},"kind":{"Impl":{"id":54}},"from":{"krate":5,"index":105},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":36622,"byte_end":36625,"line_start":1093,"line_end":1093,"column_start":41,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":5,"index":4522},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/arbitrary.rs","byte_start":36851,"byte_end":36861,"line_start":1103,"line_end":1103,"column_start":20,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":1,"index":8330},"to":{"krate":0,"index":88}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":51077,"byte_end":51087,"line_start":51,"line_end":51,"column_start":6,"column_end":16},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":56162,"byte_end":56172,"line_start":204,"line_end":204,"column_start":6,"column_end":16},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":673},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59578,"byte_end":59588,"line_start":311,"line_end":311,"column_start":19,"column_end":29},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":673},"to":{"krate":0,"index":309}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":59695,"byte_end":59701,"line_start":317,"line_end":317,"column_start":25,"column_end":31},"kind":{"Impl":{"id":61}},"from":{"krate":2,"index":34810},"to":{"krate":0,"index":309}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":62668,"byte_end":62677,"line_start":416,"line_end":416,"column_start":14,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":88},"to":{"krate":0,"index":328}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":62680,"byte_end":62685,"line_start":416,"line_end":416,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":6953},"to":{"krate":0,"index":328}},{"span":{"file_name":"/home/fredrik/.cargo/registry/src/github.com-1ecc6299db9ec823/quickcheck-1.0.3/src/tester.rs","byte_start":62726,"byte_end":62727,"line_start":417,"line_end":417,"column_start":38,"column_end":39},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":330},"to":{"krate":0,"index":328}}]}