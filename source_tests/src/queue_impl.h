//
// Created by Magnus on 3/31/21.
//
#pragma once

#include "queue.h"

struct IntegerSLISTEntry {
    int data;
    SLIST_ENTRY(IntegerSLISTEntry) entries;             /* Singly linked list */
};

SLIST_HEAD(mySinglyLinkedListHead, IntegerSLISTEntry);


struct IntegerSTAILQueueNode {
    int val;
    STAILQ_ENTRY(IntegerSTAILQueueNode) links;
};

STAILQ_HEAD(mySTAILQueueHead, IntegerSTAILQueueNode);

//When inlining the functions, no coverage was generated by gcov. Maybe solvable
//but it shouldn't affect functionality only performance.
//Queue
void STAILQ_INIT_impl(mySTAILQueueHead* head);
bool STAILQ_EMPTY_impl(mySTAILQueueHead *head);
void STAILQ_INSERT_HEAD_impl(mySTAILQueueHead* head, IntegerSTAILQueueNode* entry);
void STAILQ_REMOVE_HEAD_impl(mySTAILQueueHead* head);
void STAILQ_SWAP_impl(void* head1,void* head2,void* type);

//List
void SLIST_INIT_impl(mySinglyLinkedListHead*);
void SLIST_CONCAT_impl(mySinglyLinkedListHead* head1, mySinglyLinkedListHead* head2);
bool SLIST_EMPTY_impl(mySinglyLinkedListHead* head);
void SLIST_INSERT_AFTER_impl(IntegerSLISTEntry* slistelm, IntegerSLISTEntry* elm);
void SLIST_INSERT_HEAD_impl(mySinglyLinkedListHead* head,IntegerSLISTEntry* elm);
void SLIST_REMOVE_impl(mySinglyLinkedListHead* head, IntegerSLISTEntry* elm);
void SLIST_REMOVE_AFTER_impl(IntegerSLISTEntry* elm);
void SLIST_REMOVE_HEAD_impl(mySinglyLinkedListHead* head);
void SLIST_REMOVE_PREVPTR_impl(IntegerSLISTEntry**, IntegerSLISTEntry*);
void SLIST_SWAP_impl(mySinglyLinkedListHead*,mySinglyLinkedListHead*);
mySinglyLinkedListHead* SLIST_END_impl(mySinglyLinkedListHead*);
IntegerSLISTEntry* SLIST_FIRST_impl(mySinglyLinkedListHead* h);
